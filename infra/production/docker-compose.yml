version: "3.9"

# USDX/Wexel Production Docker Compose Configuration
# This is a reference configuration for production deployment
# Adjust volumes, networks, and secrets according to your infrastructure

services:
  # PostgreSQL Database (Primary)
  db:
    image: postgres:16
    container_name: usdx-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-usdx}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      POSTGRES_DB: ${POSTGRES_DB:-usdx_wexel}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups:ro
    ports:
      - "127.0.0.1:5432:5432" # Only expose on localhost for security
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-usdx}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 4G
        reservations:
          cpus: "1"
          memory: 2G

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: usdx-redis
    restart: always
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD is required}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379" # Only expose on localhost
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G

  # Backend/Indexer Application
  indexer:
    image: ${REGISTRY:-}usdx-wexel-indexer:${IMAGE_TAG:-latest}
    container_name: usdx-indexer
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-usdx}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-usdx_wexel}
      REDIS_URL: redis://default:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET:?JWT_SECRET is required}
      API_PORT: 3001
      CORS_ORIGIN: ${CORS_ORIGIN:-https://app.usdx-wexel.com}

      # Solana Configuration
      SOLANA_RPC_URL: ${SOLANA_RPC_URL:?SOLANA_RPC_URL is required}
      SOLANA_WEBSOCKET_URL: ${SOLANA_WEBSOCKET_URL:?SOLANA_WEBSOCKET_URL is required}
      SOLANA_POOL_PROGRAM_ID: ${SOLANA_POOL_PROGRAM_ID:?Required}
      SOLANA_WEXEL_NFT_PROGRAM_ID: ${SOLANA_WEXEL_NFT_PROGRAM_ID:?Required}
      SOLANA_REWARDS_PROGRAM_ID: ${SOLANA_REWARDS_PROGRAM_ID:?Required}
      SOLANA_COLLATERAL_PROGRAM_ID: ${SOLANA_COLLATERAL_PROGRAM_ID:?Required}
      SOLANA_ORACLE_PROGRAM_ID: ${SOLANA_ORACLE_PROGRAM_ID:?Required}
      SOLANA_MARKETPLACE_PROGRAM_ID: ${SOLANA_MARKETPLACE_PROGRAM_ID:?Required}

      # Tron Configuration
      TRON_GRID_API_KEY: ${TRON_GRID_API_KEY:?Required}
      TRON_NETWORK: mainnet
      TRON_DEPOSIT_VAULT_ADDRESS: ${TRON_DEPOSIT_VAULT_ADDRESS:?Required}
      TRON_PRICE_FEED_ADDRESS: ${TRON_PRICE_FEED_ADDRESS:?Required}

      # Oracles
      PYTH_PRICE_FEED_ID: ${PYTH_PRICE_FEED_ID}
      CHAINLINK_PRICE_FEED_ADDRESS: ${CHAINLINK_PRICE_FEED_ADDRESS}

      # Security
      ADMIN_MULTISIG_ADDRESS: ${ADMIN_MULTISIG_ADDRESS:?Required}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET:?Required}

      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}

      # Notifications
      NOTIFICATION_WEBHOOK_URL: ${NOTIFICATION_WEBHOOK_URL}
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend
      - frontend
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 4G
        reservations:
          cpus: "1"
          memory: 2G

  # Frontend Web Application
  webapp:
    image: ${REGISTRY:-}usdx-wexel-webapp:${IMAGE_TAG:-latest}
    container_name: usdx-webapp
    restart: always
    depends_on:
      - indexer
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.usdx-wexel.com}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-wss://api.usdx-wexel.com}
      NEXT_PUBLIC_SOLANA_NETWORK: mainnet-beta
      NEXT_PUBLIC_TRON_NETWORK: mainnet
      NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${WALLETCONNECT_PROJECT_ID}
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - frontend
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: usdx-nginx
    restart: always
    depends_on:
      - indexer
      - webapp
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M

networks:
  backend:
    driver: bridge
    internal: true # Backend network is internal only
  frontend:
    driver: bridge

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/usdx-wexel/postgres
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/usdx-wexel/redis
      o: bind
  nginx_cache:
    driver: local
