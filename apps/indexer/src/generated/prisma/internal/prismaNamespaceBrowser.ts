/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the browser.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from '@prisma/client/runtime/index-browser';

export type * from '../models.js';
export type * from './prismaNamespace.js';

export const Decimal = runtime.Decimal;

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as new (
    secret: never,
  ) => typeof runtime.objectEnumValues.instances.DbNull,
  JsonNull: runtime.objectEnumValues.classes.JsonNull as new (
    secret: never,
  ) => typeof runtime.objectEnumValues.instances.JsonNull,
  AnyNull: runtime.objectEnumValues.classes.AnyNull as new (
    secret: never,
  ) => typeof runtime.objectEnumValues.instances.AnyNull,
};
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull;
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull;
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull;

export const ModelName = {
  Pool: 'Pool',
  Wexel: 'Wexel',
  CollateralPosition: 'CollateralPosition',
  Listing: 'Listing',
  Claim: 'Claim',
  Boost: 'Boost',
  Deposit: 'Deposit',
  User: 'User',
  TokenPrice: 'TokenPrice',
  BlockchainEvent: 'BlockchainEvent',
} as const;

export type ModelName = (typeof ModelName)[keyof typeof ModelName];

/*
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
} as const);

export type TransactionIsolationLevel =
  (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel];

export const PoolScalarFieldEnum = {
  id: 'id',
  apy_base_bp: 'apy_base_bp',
  lock_months: 'lock_months',
  min_deposit_usd: 'min_deposit_usd',
  total_liquidity: 'total_liquidity',
  total_wexels: 'total_wexels',
  boost_target_bp: 'boost_target_bp',
  boost_max_bp: 'boost_max_bp',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
} as const;

export type PoolScalarFieldEnum =
  (typeof PoolScalarFieldEnum)[keyof typeof PoolScalarFieldEnum];

export const WexelScalarFieldEnum = {
  id: 'id',
  owner_solana: 'owner_solana',
  owner_tron: 'owner_tron',
  pool_id: 'pool_id',
  principal_usd: 'principal_usd',
  apy_base_bp: 'apy_base_bp',
  apy_boost_bp: 'apy_boost_bp',
  start_ts: 'start_ts',
  end_ts: 'end_ts',
  is_collateralized: 'is_collateralized',
  total_claimed_usd: 'total_claimed_usd',
  nft_mint_address: 'nft_mint_address',
  nft_token_address: 'nft_token_address',
  created_at: 'created_at',
  updated_at: 'updated_at',
} as const;

export type WexelScalarFieldEnum =
  (typeof WexelScalarFieldEnum)[keyof typeof WexelScalarFieldEnum];

export const CollateralPositionScalarFieldEnum = {
  wexel_id: 'wexel_id',
  loan_usd: 'loan_usd',
  start_ts: 'start_ts',
  repaid: 'repaid',
  created_at: 'created_at',
  updated_at: 'updated_at',
} as const;

export type CollateralPositionScalarFieldEnum =
  (typeof CollateralPositionScalarFieldEnum)[keyof typeof CollateralPositionScalarFieldEnum];

export const ListingScalarFieldEnum = {
  id: 'id',
  wexel_id: 'wexel_id',
  ask_price_usd: 'ask_price_usd',
  auction: 'auction',
  min_bid_usd: 'min_bid_usd',
  expiry_ts: 'expiry_ts',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
} as const;

export type ListingScalarFieldEnum =
  (typeof ListingScalarFieldEnum)[keyof typeof ListingScalarFieldEnum];

export const ClaimScalarFieldEnum = {
  id: 'id',
  wexel_id: 'wexel_id',
  amount_usd: 'amount_usd',
  claim_type: 'claim_type',
  tx_hash: 'tx_hash',
  created_at: 'created_at',
} as const;

export type ClaimScalarFieldEnum =
  (typeof ClaimScalarFieldEnum)[keyof typeof ClaimScalarFieldEnum];

export const BoostScalarFieldEnum = {
  id: 'id',
  wexel_id: 'wexel_id',
  token_mint: 'token_mint',
  amount: 'amount',
  value_usd: 'value_usd',
  apy_boost_bp: 'apy_boost_bp',
  price_usd: 'price_usd',
  created_at: 'created_at',
} as const;

export type BoostScalarFieldEnum =
  (typeof BoostScalarFieldEnum)[keyof typeof BoostScalarFieldEnum];

export const DepositScalarFieldEnum = {
  id: 'id',
  pool_id: 'pool_id',
  user_address: 'user_address',
  amount_usd: 'amount_usd',
  wexel_id: 'wexel_id',
  tx_hash: 'tx_hash',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
} as const;

export type DepositScalarFieldEnum =
  (typeof DepositScalarFieldEnum)[keyof typeof DepositScalarFieldEnum];

export const UserScalarFieldEnum = {
  id: 'id',
  solana_address: 'solana_address',
  tron_address: 'tron_address',
  email: 'email',
  telegram_id: 'telegram_id',
  is_kyc_verified: 'is_kyc_verified',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
} as const;

export type UserScalarFieldEnum =
  (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum];

export const TokenPriceScalarFieldEnum = {
  id: 'id',
  token_mint: 'token_mint',
  price_usd: 'price_usd',
  source: 'source',
  updated_at: 'updated_at',
} as const;

export type TokenPriceScalarFieldEnum =
  (typeof TokenPriceScalarFieldEnum)[keyof typeof TokenPriceScalarFieldEnum];

export const BlockchainEventScalarFieldEnum = {
  id: 'id',
  chain: 'chain',
  tx_hash: 'tx_hash',
  event_type: 'event_type',
  data: 'data',
  processed: 'processed',
  created_at: 'created_at',
} as const;

export type BlockchainEventScalarFieldEnum =
  (typeof BlockchainEventScalarFieldEnum)[keyof typeof BlockchainEventScalarFieldEnum];

export const SortOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];

export const JsonNullValueInput = {
  JsonNull: JsonNull,
} as const;

export type JsonNullValueInput =
  (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput];

export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive',
} as const;

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode];

export const NullsOrder = {
  first: 'first',
  last: 'last',
} as const;

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder];

export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull,
} as const;

export type JsonNullValueFilter =
  (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter];
