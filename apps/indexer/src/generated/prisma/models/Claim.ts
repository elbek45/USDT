/* !!! This is code generated by Prisma. Do not edit directly. !!! */

// @ts-nocheck
/*
 * This file exports the `Claim` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums.js';
import type * as Prisma from '../internal/prismaNamespace.js';

/**
 * Model Claim
 *
 */
export type ClaimModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ClaimPayload>;

export type AggregateClaim = {
  _count: ClaimCountAggregateOutputType | null;
  _avg: ClaimAvgAggregateOutputType | null;
  _sum: ClaimSumAggregateOutputType | null;
  _min: ClaimMinAggregateOutputType | null;
  _max: ClaimMaxAggregateOutputType | null;
};

export type ClaimAvgAggregateOutputType = {
  id: number | null;
  wexel_id: number | null;
  amount_usd: number | null;
};

export type ClaimSumAggregateOutputType = {
  id: bigint | null;
  wexel_id: bigint | null;
  amount_usd: bigint | null;
};

export type ClaimMinAggregateOutputType = {
  id: bigint | null;
  wexel_id: bigint | null;
  amount_usd: bigint | null;
  claim_type: string | null;
  tx_hash: string | null;
  created_at: Date | null;
};

export type ClaimMaxAggregateOutputType = {
  id: bigint | null;
  wexel_id: bigint | null;
  amount_usd: bigint | null;
  claim_type: string | null;
  tx_hash: string | null;
  created_at: Date | null;
};

export type ClaimCountAggregateOutputType = {
  id: number;
  wexel_id: number;
  amount_usd: number;
  claim_type: number;
  tx_hash: number;
  created_at: number;
  _all: number;
};

export type ClaimAvgAggregateInputType = {
  id?: true;
  wexel_id?: true;
  amount_usd?: true;
};

export type ClaimSumAggregateInputType = {
  id?: true;
  wexel_id?: true;
  amount_usd?: true;
};

export type ClaimMinAggregateInputType = {
  id?: true;
  wexel_id?: true;
  amount_usd?: true;
  claim_type?: true;
  tx_hash?: true;
  created_at?: true;
};

export type ClaimMaxAggregateInputType = {
  id?: true;
  wexel_id?: true;
  amount_usd?: true;
  claim_type?: true;
  tx_hash?: true;
  created_at?: true;
};

export type ClaimCountAggregateInputType = {
  id?: true;
  wexel_id?: true;
  amount_usd?: true;
  claim_type?: true;
  tx_hash?: true;
  created_at?: true;
  _all?: true;
};

export type ClaimAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Claim to aggregate.
   */
  where?: Prisma.ClaimWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Claims to fetch.
   */
  orderBy?:
    | Prisma.ClaimOrderByWithRelationInput
    | Prisma.ClaimOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ClaimWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Claims from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Claims.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Claims
   **/
  _count?: true | ClaimCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: ClaimAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: ClaimSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ClaimMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ClaimMaxAggregateInputType;
};

export type GetClaimAggregateType<T extends ClaimAggregateArgs> = {
  [P in keyof T & keyof AggregateClaim]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateClaim[P]>
    : Prisma.GetScalarType<T[P], AggregateClaim[P]>;
};

export type ClaimGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ClaimWhereInput;
  orderBy?:
    | Prisma.ClaimOrderByWithAggregationInput
    | Prisma.ClaimOrderByWithAggregationInput[];
  by: Prisma.ClaimScalarFieldEnum[] | Prisma.ClaimScalarFieldEnum;
  having?: Prisma.ClaimScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ClaimCountAggregateInputType | true;
  _avg?: ClaimAvgAggregateInputType;
  _sum?: ClaimSumAggregateInputType;
  _min?: ClaimMinAggregateInputType;
  _max?: ClaimMaxAggregateInputType;
};

export type ClaimGroupByOutputType = {
  id: bigint;
  wexel_id: bigint;
  amount_usd: bigint;
  claim_type: string;
  tx_hash: string | null;
  created_at: Date;
  _count: ClaimCountAggregateOutputType | null;
  _avg: ClaimAvgAggregateOutputType | null;
  _sum: ClaimSumAggregateOutputType | null;
  _min: ClaimMinAggregateOutputType | null;
  _max: ClaimMaxAggregateOutputType | null;
};

type GetClaimGroupByPayload<T extends ClaimGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ClaimGroupByOutputType, T['by']> & {
      [P in keyof T & keyof ClaimGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], ClaimGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], ClaimGroupByOutputType[P]>;
    }
  >
>;

export type ClaimWhereInput = {
  AND?: Prisma.ClaimWhereInput | Prisma.ClaimWhereInput[];
  OR?: Prisma.ClaimWhereInput[];
  NOT?: Prisma.ClaimWhereInput | Prisma.ClaimWhereInput[];
  id?: Prisma.BigIntFilter<'Claim'> | bigint | number;
  wexel_id?: Prisma.BigIntFilter<'Claim'> | bigint | number;
  amount_usd?: Prisma.BigIntFilter<'Claim'> | bigint | number;
  claim_type?: Prisma.StringFilter<'Claim'> | string;
  tx_hash?: Prisma.StringNullableFilter<'Claim'> | string | null;
  created_at?: Prisma.DateTimeFilter<'Claim'> | Date | string;
  wexel?: Prisma.XOR<Prisma.WexelScalarRelationFilter, Prisma.WexelWhereInput>;
};

export type ClaimOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  wexel_id?: Prisma.SortOrder;
  amount_usd?: Prisma.SortOrder;
  claim_type?: Prisma.SortOrder;
  tx_hash?: Prisma.SortOrderInput | Prisma.SortOrder;
  created_at?: Prisma.SortOrder;
  wexel?: Prisma.WexelOrderByWithRelationInput;
};

export type ClaimWhereUniqueInput = Prisma.AtLeast<
  {
    id?: bigint | number;
    AND?: Prisma.ClaimWhereInput | Prisma.ClaimWhereInput[];
    OR?: Prisma.ClaimWhereInput[];
    NOT?: Prisma.ClaimWhereInput | Prisma.ClaimWhereInput[];
    wexel_id?: Prisma.BigIntFilter<'Claim'> | bigint | number;
    amount_usd?: Prisma.BigIntFilter<'Claim'> | bigint | number;
    claim_type?: Prisma.StringFilter<'Claim'> | string;
    tx_hash?: Prisma.StringNullableFilter<'Claim'> | string | null;
    created_at?: Prisma.DateTimeFilter<'Claim'> | Date | string;
    wexel?: Prisma.XOR<
      Prisma.WexelScalarRelationFilter,
      Prisma.WexelWhereInput
    >;
  },
  'id'
>;

export type ClaimOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  wexel_id?: Prisma.SortOrder;
  amount_usd?: Prisma.SortOrder;
  claim_type?: Prisma.SortOrder;
  tx_hash?: Prisma.SortOrderInput | Prisma.SortOrder;
  created_at?: Prisma.SortOrder;
  _count?: Prisma.ClaimCountOrderByAggregateInput;
  _avg?: Prisma.ClaimAvgOrderByAggregateInput;
  _max?: Prisma.ClaimMaxOrderByAggregateInput;
  _min?: Prisma.ClaimMinOrderByAggregateInput;
  _sum?: Prisma.ClaimSumOrderByAggregateInput;
};

export type ClaimScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ClaimScalarWhereWithAggregatesInput
    | Prisma.ClaimScalarWhereWithAggregatesInput[];
  OR?: Prisma.ClaimScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ClaimScalarWhereWithAggregatesInput
    | Prisma.ClaimScalarWhereWithAggregatesInput[];
  id?: Prisma.BigIntWithAggregatesFilter<'Claim'> | bigint | number;
  wexel_id?: Prisma.BigIntWithAggregatesFilter<'Claim'> | bigint | number;
  amount_usd?: Prisma.BigIntWithAggregatesFilter<'Claim'> | bigint | number;
  claim_type?: Prisma.StringWithAggregatesFilter<'Claim'> | string;
  tx_hash?: Prisma.StringNullableWithAggregatesFilter<'Claim'> | string | null;
  created_at?: Prisma.DateTimeWithAggregatesFilter<'Claim'> | Date | string;
};

export type ClaimCreateInput = {
  id?: bigint | number;
  amount_usd: bigint | number;
  claim_type: string;
  tx_hash?: string | null;
  created_at?: Date | string;
  wexel: Prisma.WexelCreateNestedOneWithoutClaimsInput;
};

export type ClaimUncheckedCreateInput = {
  id?: bigint | number;
  wexel_id: bigint | number;
  amount_usd: bigint | number;
  claim_type: string;
  tx_hash?: string | null;
  created_at?: Date | string;
};

export type ClaimUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  amount_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  claim_type?: Prisma.StringFieldUpdateOperationsInput | string;
  tx_hash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  wexel?: Prisma.WexelUpdateOneRequiredWithoutClaimsNestedInput;
};

export type ClaimUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  wexel_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  amount_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  claim_type?: Prisma.StringFieldUpdateOperationsInput | string;
  tx_hash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ClaimCreateManyInput = {
  id?: bigint | number;
  wexel_id: bigint | number;
  amount_usd: bigint | number;
  claim_type: string;
  tx_hash?: string | null;
  created_at?: Date | string;
};

export type ClaimUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  amount_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  claim_type?: Prisma.StringFieldUpdateOperationsInput | string;
  tx_hash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ClaimUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  wexel_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  amount_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  claim_type?: Prisma.StringFieldUpdateOperationsInput | string;
  tx_hash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ClaimListRelationFilter = {
  every?: Prisma.ClaimWhereInput;
  some?: Prisma.ClaimWhereInput;
  none?: Prisma.ClaimWhereInput;
};

export type ClaimOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ClaimCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  wexel_id?: Prisma.SortOrder;
  amount_usd?: Prisma.SortOrder;
  claim_type?: Prisma.SortOrder;
  tx_hash?: Prisma.SortOrder;
  created_at?: Prisma.SortOrder;
};

export type ClaimAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  wexel_id?: Prisma.SortOrder;
  amount_usd?: Prisma.SortOrder;
};

export type ClaimMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  wexel_id?: Prisma.SortOrder;
  amount_usd?: Prisma.SortOrder;
  claim_type?: Prisma.SortOrder;
  tx_hash?: Prisma.SortOrder;
  created_at?: Prisma.SortOrder;
};

export type ClaimMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  wexel_id?: Prisma.SortOrder;
  amount_usd?: Prisma.SortOrder;
  claim_type?: Prisma.SortOrder;
  tx_hash?: Prisma.SortOrder;
  created_at?: Prisma.SortOrder;
};

export type ClaimSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  wexel_id?: Prisma.SortOrder;
  amount_usd?: Prisma.SortOrder;
};

export type ClaimCreateNestedManyWithoutWexelInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClaimCreateWithoutWexelInput,
        Prisma.ClaimUncheckedCreateWithoutWexelInput
      >
    | Prisma.ClaimCreateWithoutWexelInput[]
    | Prisma.ClaimUncheckedCreateWithoutWexelInput[];
  connectOrCreate?:
    | Prisma.ClaimCreateOrConnectWithoutWexelInput
    | Prisma.ClaimCreateOrConnectWithoutWexelInput[];
  createMany?: Prisma.ClaimCreateManyWexelInputEnvelope;
  connect?: Prisma.ClaimWhereUniqueInput | Prisma.ClaimWhereUniqueInput[];
};

export type ClaimUncheckedCreateNestedManyWithoutWexelInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClaimCreateWithoutWexelInput,
        Prisma.ClaimUncheckedCreateWithoutWexelInput
      >
    | Prisma.ClaimCreateWithoutWexelInput[]
    | Prisma.ClaimUncheckedCreateWithoutWexelInput[];
  connectOrCreate?:
    | Prisma.ClaimCreateOrConnectWithoutWexelInput
    | Prisma.ClaimCreateOrConnectWithoutWexelInput[];
  createMany?: Prisma.ClaimCreateManyWexelInputEnvelope;
  connect?: Prisma.ClaimWhereUniqueInput | Prisma.ClaimWhereUniqueInput[];
};

export type ClaimUpdateManyWithoutWexelNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClaimCreateWithoutWexelInput,
        Prisma.ClaimUncheckedCreateWithoutWexelInput
      >
    | Prisma.ClaimCreateWithoutWexelInput[]
    | Prisma.ClaimUncheckedCreateWithoutWexelInput[];
  connectOrCreate?:
    | Prisma.ClaimCreateOrConnectWithoutWexelInput
    | Prisma.ClaimCreateOrConnectWithoutWexelInput[];
  upsert?:
    | Prisma.ClaimUpsertWithWhereUniqueWithoutWexelInput
    | Prisma.ClaimUpsertWithWhereUniqueWithoutWexelInput[];
  createMany?: Prisma.ClaimCreateManyWexelInputEnvelope;
  set?: Prisma.ClaimWhereUniqueInput | Prisma.ClaimWhereUniqueInput[];
  disconnect?: Prisma.ClaimWhereUniqueInput | Prisma.ClaimWhereUniqueInput[];
  delete?: Prisma.ClaimWhereUniqueInput | Prisma.ClaimWhereUniqueInput[];
  connect?: Prisma.ClaimWhereUniqueInput | Prisma.ClaimWhereUniqueInput[];
  update?:
    | Prisma.ClaimUpdateWithWhereUniqueWithoutWexelInput
    | Prisma.ClaimUpdateWithWhereUniqueWithoutWexelInput[];
  updateMany?:
    | Prisma.ClaimUpdateManyWithWhereWithoutWexelInput
    | Prisma.ClaimUpdateManyWithWhereWithoutWexelInput[];
  deleteMany?: Prisma.ClaimScalarWhereInput | Prisma.ClaimScalarWhereInput[];
};

export type ClaimUncheckedUpdateManyWithoutWexelNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ClaimCreateWithoutWexelInput,
        Prisma.ClaimUncheckedCreateWithoutWexelInput
      >
    | Prisma.ClaimCreateWithoutWexelInput[]
    | Prisma.ClaimUncheckedCreateWithoutWexelInput[];
  connectOrCreate?:
    | Prisma.ClaimCreateOrConnectWithoutWexelInput
    | Prisma.ClaimCreateOrConnectWithoutWexelInput[];
  upsert?:
    | Prisma.ClaimUpsertWithWhereUniqueWithoutWexelInput
    | Prisma.ClaimUpsertWithWhereUniqueWithoutWexelInput[];
  createMany?: Prisma.ClaimCreateManyWexelInputEnvelope;
  set?: Prisma.ClaimWhereUniqueInput | Prisma.ClaimWhereUniqueInput[];
  disconnect?: Prisma.ClaimWhereUniqueInput | Prisma.ClaimWhereUniqueInput[];
  delete?: Prisma.ClaimWhereUniqueInput | Prisma.ClaimWhereUniqueInput[];
  connect?: Prisma.ClaimWhereUniqueInput | Prisma.ClaimWhereUniqueInput[];
  update?:
    | Prisma.ClaimUpdateWithWhereUniqueWithoutWexelInput
    | Prisma.ClaimUpdateWithWhereUniqueWithoutWexelInput[];
  updateMany?:
    | Prisma.ClaimUpdateManyWithWhereWithoutWexelInput
    | Prisma.ClaimUpdateManyWithWhereWithoutWexelInput[];
  deleteMany?: Prisma.ClaimScalarWhereInput | Prisma.ClaimScalarWhereInput[];
};

export type ClaimCreateWithoutWexelInput = {
  id?: bigint | number;
  amount_usd: bigint | number;
  claim_type: string;
  tx_hash?: string | null;
  created_at?: Date | string;
};

export type ClaimUncheckedCreateWithoutWexelInput = {
  id?: bigint | number;
  amount_usd: bigint | number;
  claim_type: string;
  tx_hash?: string | null;
  created_at?: Date | string;
};

export type ClaimCreateOrConnectWithoutWexelInput = {
  where: Prisma.ClaimWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ClaimCreateWithoutWexelInput,
    Prisma.ClaimUncheckedCreateWithoutWexelInput
  >;
};

export type ClaimCreateManyWexelInputEnvelope = {
  data: Prisma.ClaimCreateManyWexelInput | Prisma.ClaimCreateManyWexelInput[];
  skipDuplicates?: boolean;
};

export type ClaimUpsertWithWhereUniqueWithoutWexelInput = {
  where: Prisma.ClaimWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ClaimUpdateWithoutWexelInput,
    Prisma.ClaimUncheckedUpdateWithoutWexelInput
  >;
  create: Prisma.XOR<
    Prisma.ClaimCreateWithoutWexelInput,
    Prisma.ClaimUncheckedCreateWithoutWexelInput
  >;
};

export type ClaimUpdateWithWhereUniqueWithoutWexelInput = {
  where: Prisma.ClaimWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ClaimUpdateWithoutWexelInput,
    Prisma.ClaimUncheckedUpdateWithoutWexelInput
  >;
};

export type ClaimUpdateManyWithWhereWithoutWexelInput = {
  where: Prisma.ClaimScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ClaimUpdateManyMutationInput,
    Prisma.ClaimUncheckedUpdateManyWithoutWexelInput
  >;
};

export type ClaimScalarWhereInput = {
  AND?: Prisma.ClaimScalarWhereInput | Prisma.ClaimScalarWhereInput[];
  OR?: Prisma.ClaimScalarWhereInput[];
  NOT?: Prisma.ClaimScalarWhereInput | Prisma.ClaimScalarWhereInput[];
  id?: Prisma.BigIntFilter<'Claim'> | bigint | number;
  wexel_id?: Prisma.BigIntFilter<'Claim'> | bigint | number;
  amount_usd?: Prisma.BigIntFilter<'Claim'> | bigint | number;
  claim_type?: Prisma.StringFilter<'Claim'> | string;
  tx_hash?: Prisma.StringNullableFilter<'Claim'> | string | null;
  created_at?: Prisma.DateTimeFilter<'Claim'> | Date | string;
};

export type ClaimCreateManyWexelInput = {
  id?: bigint | number;
  amount_usd: bigint | number;
  claim_type: string;
  tx_hash?: string | null;
  created_at?: Date | string;
};

export type ClaimUpdateWithoutWexelInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  amount_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  claim_type?: Prisma.StringFieldUpdateOperationsInput | string;
  tx_hash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ClaimUncheckedUpdateWithoutWexelInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  amount_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  claim_type?: Prisma.StringFieldUpdateOperationsInput | string;
  tx_hash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ClaimUncheckedUpdateManyWithoutWexelInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  amount_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  claim_type?: Prisma.StringFieldUpdateOperationsInput | string;
  tx_hash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ClaimSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    wexel_id?: boolean;
    amount_usd?: boolean;
    claim_type?: boolean;
    tx_hash?: boolean;
    created_at?: boolean;
    wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['claim']
>;

export type ClaimSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    wexel_id?: boolean;
    amount_usd?: boolean;
    claim_type?: boolean;
    tx_hash?: boolean;
    created_at?: boolean;
    wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['claim']
>;

export type ClaimSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    wexel_id?: boolean;
    amount_usd?: boolean;
    claim_type?: boolean;
    tx_hash?: boolean;
    created_at?: boolean;
    wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['claim']
>;

export type ClaimSelectScalar = {
  id?: boolean;
  wexel_id?: boolean;
  amount_usd?: boolean;
  claim_type?: boolean;
  tx_hash?: boolean;
  created_at?: boolean;
};

export type ClaimOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'wexel_id' | 'amount_usd' | 'claim_type' | 'tx_hash' | 'created_at',
  ExtArgs['result']['claim']
>;
export type ClaimInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>;
};
export type ClaimIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>;
};
export type ClaimIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>;
};

export type $ClaimPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Claim';
  objects: {
    wexel: Prisma.$WexelPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: bigint;
      wexel_id: bigint;
      amount_usd: bigint;
      claim_type: string;
      tx_hash: string | null;
      created_at: Date;
    },
    ExtArgs['result']['claim']
  >;
  composites: {};
};

export type ClaimGetPayload<
  S extends boolean | null | undefined | ClaimDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ClaimPayload, S>;

export type ClaimCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ClaimFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: ClaimCountAggregateInputType | true;
};

export interface ClaimDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Claim'];
    meta: { name: 'Claim' };
  };
  /**
   * Find zero or one Claim that matches the filter.
   * @param {ClaimFindUniqueArgs} args - Arguments to find a Claim
   * @example
   * // Get one Claim
   * const claim = await prisma.claim.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ClaimFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ClaimFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ClaimClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClaimPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Claim that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ClaimFindUniqueOrThrowArgs} args - Arguments to find a Claim
   * @example
   * // Get one Claim
   * const claim = await prisma.claim.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ClaimFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ClaimFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ClaimClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClaimPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Claim that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClaimFindFirstArgs} args - Arguments to find a Claim
   * @example
   * // Get one Claim
   * const claim = await prisma.claim.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ClaimFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ClaimFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ClaimClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClaimPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Claim that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClaimFindFirstOrThrowArgs} args - Arguments to find a Claim
   * @example
   * // Get one Claim
   * const claim = await prisma.claim.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ClaimFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ClaimFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ClaimClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClaimPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Claims that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClaimFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Claims
   * const claims = await prisma.claim.findMany()
   *
   * // Get first 10 Claims
   * const claims = await prisma.claim.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const claimWithIdOnly = await prisma.claim.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ClaimFindManyArgs>(
    args?: Prisma.SelectSubset<T, ClaimFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ClaimPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Claim.
   * @param {ClaimCreateArgs} args - Arguments to create a Claim.
   * @example
   * // Create one Claim
   * const Claim = await prisma.claim.create({
   *   data: {
   *     // ... data to create a Claim
   *   }
   * })
   *
   */
  create<T extends ClaimCreateArgs>(
    args: Prisma.SelectSubset<T, ClaimCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ClaimClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClaimPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Claims.
   * @param {ClaimCreateManyArgs} args - Arguments to create many Claims.
   * @example
   * // Create many Claims
   * const claim = await prisma.claim.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ClaimCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ClaimCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Claims and returns the data saved in the database.
   * @param {ClaimCreateManyAndReturnArgs} args - Arguments to create many Claims.
   * @example
   * // Create many Claims
   * const claim = await prisma.claim.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Claims and only return the `id`
   * const claimWithIdOnly = await prisma.claim.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ClaimCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ClaimCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ClaimPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Claim.
   * @param {ClaimDeleteArgs} args - Arguments to delete one Claim.
   * @example
   * // Delete one Claim
   * const Claim = await prisma.claim.delete({
   *   where: {
   *     // ... filter to delete one Claim
   *   }
   * })
   *
   */
  delete<T extends ClaimDeleteArgs>(
    args: Prisma.SelectSubset<T, ClaimDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ClaimClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClaimPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Claim.
   * @param {ClaimUpdateArgs} args - Arguments to update one Claim.
   * @example
   * // Update one Claim
   * const claim = await prisma.claim.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ClaimUpdateArgs>(
    args: Prisma.SelectSubset<T, ClaimUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ClaimClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClaimPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Claims.
   * @param {ClaimDeleteManyArgs} args - Arguments to filter Claims to delete.
   * @example
   * // Delete a few Claims
   * const { count } = await prisma.claim.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ClaimDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ClaimDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Claims.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClaimUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Claims
   * const claim = await prisma.claim.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ClaimUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ClaimUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Claims and returns the data updated in the database.
   * @param {ClaimUpdateManyAndReturnArgs} args - Arguments to update many Claims.
   * @example
   * // Update many Claims
   * const claim = await prisma.claim.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Claims and only return the `id`
   * const claimWithIdOnly = await prisma.claim.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ClaimUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ClaimUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ClaimPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Claim.
   * @param {ClaimUpsertArgs} args - Arguments to update or create a Claim.
   * @example
   * // Update or create a Claim
   * const claim = await prisma.claim.upsert({
   *   create: {
   *     // ... data to create a Claim
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Claim we want to update
   *   }
   * })
   */
  upsert<T extends ClaimUpsertArgs>(
    args: Prisma.SelectSubset<T, ClaimUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ClaimClient<
    runtime.Types.Result.GetResult<
      Prisma.$ClaimPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Claims.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClaimCountArgs} args - Arguments to filter Claims to count.
   * @example
   * // Count the number of Claims
   * const count = await prisma.claim.count({
   *   where: {
   *     // ... the filter for the Claims we want to count
   *   }
   * })
   **/
  count<T extends ClaimCountArgs>(
    args?: Prisma.Subset<T, ClaimCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ClaimCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Claim.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClaimAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ClaimAggregateArgs>(
    args: Prisma.Subset<T, ClaimAggregateArgs>,
  ): Prisma.PrismaPromise<GetClaimAggregateType<T>>;

  /**
   * Group by Claim.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ClaimGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ClaimGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ClaimGroupByArgs['orderBy'] }
      : { orderBy?: ClaimGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ClaimGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetClaimGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Claim model
   */
  readonly fields: ClaimFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Claim.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ClaimClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  wexel<T extends Prisma.WexelDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.WexelDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__WexelClient<
    | runtime.Types.Result.GetResult<
        Prisma.$WexelPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Claim model
 */
export interface ClaimFieldRefs {
  readonly id: Prisma.FieldRef<'Claim', 'BigInt'>;
  readonly wexel_id: Prisma.FieldRef<'Claim', 'BigInt'>;
  readonly amount_usd: Prisma.FieldRef<'Claim', 'BigInt'>;
  readonly claim_type: Prisma.FieldRef<'Claim', 'String'>;
  readonly tx_hash: Prisma.FieldRef<'Claim', 'String'>;
  readonly created_at: Prisma.FieldRef<'Claim', 'DateTime'>;
}

// Custom InputTypes
/**
 * Claim findUnique
 */
export type ClaimFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Claim
   */
  select?: Prisma.ClaimSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Claim
   */
  omit?: Prisma.ClaimOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClaimInclude<ExtArgs> | null;
  /**
   * Filter, which Claim to fetch.
   */
  where: Prisma.ClaimWhereUniqueInput;
};

/**
 * Claim findUniqueOrThrow
 */
export type ClaimFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Claim
   */
  select?: Prisma.ClaimSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Claim
   */
  omit?: Prisma.ClaimOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClaimInclude<ExtArgs> | null;
  /**
   * Filter, which Claim to fetch.
   */
  where: Prisma.ClaimWhereUniqueInput;
};

/**
 * Claim findFirst
 */
export type ClaimFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Claim
   */
  select?: Prisma.ClaimSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Claim
   */
  omit?: Prisma.ClaimOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClaimInclude<ExtArgs> | null;
  /**
   * Filter, which Claim to fetch.
   */
  where?: Prisma.ClaimWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Claims to fetch.
   */
  orderBy?:
    | Prisma.ClaimOrderByWithRelationInput
    | Prisma.ClaimOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Claims.
   */
  cursor?: Prisma.ClaimWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Claims from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Claims.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Claims.
   */
  distinct?: Prisma.ClaimScalarFieldEnum | Prisma.ClaimScalarFieldEnum[];
};

/**
 * Claim findFirstOrThrow
 */
export type ClaimFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Claim
   */
  select?: Prisma.ClaimSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Claim
   */
  omit?: Prisma.ClaimOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClaimInclude<ExtArgs> | null;
  /**
   * Filter, which Claim to fetch.
   */
  where?: Prisma.ClaimWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Claims to fetch.
   */
  orderBy?:
    | Prisma.ClaimOrderByWithRelationInput
    | Prisma.ClaimOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Claims.
   */
  cursor?: Prisma.ClaimWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Claims from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Claims.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Claims.
   */
  distinct?: Prisma.ClaimScalarFieldEnum | Prisma.ClaimScalarFieldEnum[];
};

/**
 * Claim findMany
 */
export type ClaimFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Claim
   */
  select?: Prisma.ClaimSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Claim
   */
  omit?: Prisma.ClaimOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClaimInclude<ExtArgs> | null;
  /**
   * Filter, which Claims to fetch.
   */
  where?: Prisma.ClaimWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Claims to fetch.
   */
  orderBy?:
    | Prisma.ClaimOrderByWithRelationInput
    | Prisma.ClaimOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Claims.
   */
  cursor?: Prisma.ClaimWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Claims from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Claims.
   */
  skip?: number;
  distinct?: Prisma.ClaimScalarFieldEnum | Prisma.ClaimScalarFieldEnum[];
};

/**
 * Claim create
 */
export type ClaimCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Claim
   */
  select?: Prisma.ClaimSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Claim
   */
  omit?: Prisma.ClaimOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClaimInclude<ExtArgs> | null;
  /**
   * The data needed to create a Claim.
   */
  data: Prisma.XOR<Prisma.ClaimCreateInput, Prisma.ClaimUncheckedCreateInput>;
};

/**
 * Claim createMany
 */
export type ClaimCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Claims.
   */
  data: Prisma.ClaimCreateManyInput | Prisma.ClaimCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Claim createManyAndReturn
 */
export type ClaimCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Claim
   */
  select?: Prisma.ClaimSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Claim
   */
  omit?: Prisma.ClaimOmit<ExtArgs> | null;
  /**
   * The data used to create many Claims.
   */
  data: Prisma.ClaimCreateManyInput | Prisma.ClaimCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClaimIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Claim update
 */
export type ClaimUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Claim
   */
  select?: Prisma.ClaimSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Claim
   */
  omit?: Prisma.ClaimOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClaimInclude<ExtArgs> | null;
  /**
   * The data needed to update a Claim.
   */
  data: Prisma.XOR<Prisma.ClaimUpdateInput, Prisma.ClaimUncheckedUpdateInput>;
  /**
   * Choose, which Claim to update.
   */
  where: Prisma.ClaimWhereUniqueInput;
};

/**
 * Claim updateMany
 */
export type ClaimUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Claims.
   */
  data: Prisma.XOR<
    Prisma.ClaimUpdateManyMutationInput,
    Prisma.ClaimUncheckedUpdateManyInput
  >;
  /**
   * Filter which Claims to update
   */
  where?: Prisma.ClaimWhereInput;
  /**
   * Limit how many Claims to update.
   */
  limit?: number;
};

/**
 * Claim updateManyAndReturn
 */
export type ClaimUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Claim
   */
  select?: Prisma.ClaimSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Claim
   */
  omit?: Prisma.ClaimOmit<ExtArgs> | null;
  /**
   * The data used to update Claims.
   */
  data: Prisma.XOR<
    Prisma.ClaimUpdateManyMutationInput,
    Prisma.ClaimUncheckedUpdateManyInput
  >;
  /**
   * Filter which Claims to update
   */
  where?: Prisma.ClaimWhereInput;
  /**
   * Limit how many Claims to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClaimIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Claim upsert
 */
export type ClaimUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Claim
   */
  select?: Prisma.ClaimSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Claim
   */
  omit?: Prisma.ClaimOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClaimInclude<ExtArgs> | null;
  /**
   * The filter to search for the Claim to update in case it exists.
   */
  where: Prisma.ClaimWhereUniqueInput;
  /**
   * In case the Claim found by the `where` argument doesn't exist, create a new Claim with this data.
   */
  create: Prisma.XOR<Prisma.ClaimCreateInput, Prisma.ClaimUncheckedCreateInput>;
  /**
   * In case the Claim was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ClaimUpdateInput, Prisma.ClaimUncheckedUpdateInput>;
};

/**
 * Claim delete
 */
export type ClaimDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Claim
   */
  select?: Prisma.ClaimSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Claim
   */
  omit?: Prisma.ClaimOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClaimInclude<ExtArgs> | null;
  /**
   * Filter which Claim to delete.
   */
  where: Prisma.ClaimWhereUniqueInput;
};

/**
 * Claim deleteMany
 */
export type ClaimDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Claims to delete
   */
  where?: Prisma.ClaimWhereInput;
  /**
   * Limit how many Claims to delete.
   */
  limit?: number;
};

/**
 * Claim without action
 */
export type ClaimDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Claim
   */
  select?: Prisma.ClaimSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Claim
   */
  omit?: Prisma.ClaimOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClaimInclude<ExtArgs> | null;
};
