/* !!! This is code generated by Prisma. Do not edit directly. !!! */
 
// @ts-nocheck
/*
 * This file exports the `BlockchainEvent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums.js';
import type * as Prisma from '../internal/prismaNamespace.js';

/**
 * Model BlockchainEvent
 *
 */
export type BlockchainEventModel =
  runtime.Types.Result.DefaultSelection<Prisma.$BlockchainEventPayload>;

export type AggregateBlockchainEvent = {
  _count: BlockchainEventCountAggregateOutputType | null;
  _avg: BlockchainEventAvgAggregateOutputType | null;
  _sum: BlockchainEventSumAggregateOutputType | null;
  _min: BlockchainEventMinAggregateOutputType | null;
  _max: BlockchainEventMaxAggregateOutputType | null;
};

export type BlockchainEventAvgAggregateOutputType = {
  id: number | null;
};

export type BlockchainEventSumAggregateOutputType = {
  id: bigint | null;
};

export type BlockchainEventMinAggregateOutputType = {
  id: bigint | null;
  chain: string | null;
  tx_hash: string | null;
  event_type: string | null;
  processed: boolean | null;
  created_at: Date | null;
};

export type BlockchainEventMaxAggregateOutputType = {
  id: bigint | null;
  chain: string | null;
  tx_hash: string | null;
  event_type: string | null;
  processed: boolean | null;
  created_at: Date | null;
};

export type BlockchainEventCountAggregateOutputType = {
  id: number;
  chain: number;
  tx_hash: number;
  event_type: number;
  data: number;
  processed: number;
  created_at: number;
  _all: number;
};

export type BlockchainEventAvgAggregateInputType = {
  id?: true;
};

export type BlockchainEventSumAggregateInputType = {
  id?: true;
};

export type BlockchainEventMinAggregateInputType = {
  id?: true;
  chain?: true;
  tx_hash?: true;
  event_type?: true;
  processed?: true;
  created_at?: true;
};

export type BlockchainEventMaxAggregateInputType = {
  id?: true;
  chain?: true;
  tx_hash?: true;
  event_type?: true;
  processed?: true;
  created_at?: true;
};

export type BlockchainEventCountAggregateInputType = {
  id?: true;
  chain?: true;
  tx_hash?: true;
  event_type?: true;
  data?: true;
  processed?: true;
  created_at?: true;
  _all?: true;
};

export type BlockchainEventAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which BlockchainEvent to aggregate.
   */
  where?: Prisma.BlockchainEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BlockchainEvents to fetch.
   */
  orderBy?:
    | Prisma.BlockchainEventOrderByWithRelationInput
    | Prisma.BlockchainEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.BlockchainEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BlockchainEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BlockchainEvents.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned BlockchainEvents
   **/
  _count?: true | BlockchainEventCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: BlockchainEventAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: BlockchainEventSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: BlockchainEventMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: BlockchainEventMaxAggregateInputType;
};

export type GetBlockchainEventAggregateType<
  T extends BlockchainEventAggregateArgs,
> = {
  [P in keyof T & keyof AggregateBlockchainEvent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBlockchainEvent[P]>
    : Prisma.GetScalarType<T[P], AggregateBlockchainEvent[P]>;
};

export type BlockchainEventGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.BlockchainEventWhereInput;
  orderBy?:
    | Prisma.BlockchainEventOrderByWithAggregationInput
    | Prisma.BlockchainEventOrderByWithAggregationInput[];
  by:
    | Prisma.BlockchainEventScalarFieldEnum[]
    | Prisma.BlockchainEventScalarFieldEnum;
  having?: Prisma.BlockchainEventScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: BlockchainEventCountAggregateInputType | true;
  _avg?: BlockchainEventAvgAggregateInputType;
  _sum?: BlockchainEventSumAggregateInputType;
  _min?: BlockchainEventMinAggregateInputType;
  _max?: BlockchainEventMaxAggregateInputType;
};

export type BlockchainEventGroupByOutputType = {
  id: bigint;
  chain: string;
  tx_hash: string;
  event_type: string;
  data: runtime.JsonValue;
  processed: boolean;
  created_at: Date;
  _count: BlockchainEventCountAggregateOutputType | null;
  _avg: BlockchainEventAvgAggregateOutputType | null;
  _sum: BlockchainEventSumAggregateOutputType | null;
  _min: BlockchainEventMinAggregateOutputType | null;
  _max: BlockchainEventMaxAggregateOutputType | null;
};

type GetBlockchainEventGroupByPayload<T extends BlockchainEventGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<BlockchainEventGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof BlockchainEventGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BlockchainEventGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BlockchainEventGroupByOutputType[P]>;
      }
    >
  >;

export type BlockchainEventWhereInput = {
  AND?: Prisma.BlockchainEventWhereInput | Prisma.BlockchainEventWhereInput[];
  OR?: Prisma.BlockchainEventWhereInput[];
  NOT?: Prisma.BlockchainEventWhereInput | Prisma.BlockchainEventWhereInput[];
  id?: Prisma.BigIntFilter<'BlockchainEvent'> | bigint | number;
  chain?: Prisma.StringFilter<'BlockchainEvent'> | string;
  tx_hash?: Prisma.StringFilter<'BlockchainEvent'> | string;
  event_type?: Prisma.StringFilter<'BlockchainEvent'> | string;
  data?: Prisma.JsonFilter<'BlockchainEvent'>;
  processed?: Prisma.BoolFilter<'BlockchainEvent'> | boolean;
  created_at?: Prisma.DateTimeFilter<'BlockchainEvent'> | Date | string;
};

export type BlockchainEventOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  chain?: Prisma.SortOrder;
  tx_hash?: Prisma.SortOrder;
  event_type?: Prisma.SortOrder;
  data?: Prisma.SortOrder;
  processed?: Prisma.SortOrder;
  created_at?: Prisma.SortOrder;
};

export type BlockchainEventWhereUniqueInput = Prisma.AtLeast<
  {
    id?: bigint | number;
    AND?: Prisma.BlockchainEventWhereInput | Prisma.BlockchainEventWhereInput[];
    OR?: Prisma.BlockchainEventWhereInput[];
    NOT?: Prisma.BlockchainEventWhereInput | Prisma.BlockchainEventWhereInput[];
    chain?: Prisma.StringFilter<'BlockchainEvent'> | string;
    tx_hash?: Prisma.StringFilter<'BlockchainEvent'> | string;
    event_type?: Prisma.StringFilter<'BlockchainEvent'> | string;
    data?: Prisma.JsonFilter<'BlockchainEvent'>;
    processed?: Prisma.BoolFilter<'BlockchainEvent'> | boolean;
    created_at?: Prisma.DateTimeFilter<'BlockchainEvent'> | Date | string;
  },
  'id'
>;

export type BlockchainEventOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  chain?: Prisma.SortOrder;
  tx_hash?: Prisma.SortOrder;
  event_type?: Prisma.SortOrder;
  data?: Prisma.SortOrder;
  processed?: Prisma.SortOrder;
  created_at?: Prisma.SortOrder;
  _count?: Prisma.BlockchainEventCountOrderByAggregateInput;
  _avg?: Prisma.BlockchainEventAvgOrderByAggregateInput;
  _max?: Prisma.BlockchainEventMaxOrderByAggregateInput;
  _min?: Prisma.BlockchainEventMinOrderByAggregateInput;
  _sum?: Prisma.BlockchainEventSumOrderByAggregateInput;
};

export type BlockchainEventScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.BlockchainEventScalarWhereWithAggregatesInput
    | Prisma.BlockchainEventScalarWhereWithAggregatesInput[];
  OR?: Prisma.BlockchainEventScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.BlockchainEventScalarWhereWithAggregatesInput
    | Prisma.BlockchainEventScalarWhereWithAggregatesInput[];
  id?: Prisma.BigIntWithAggregatesFilter<'BlockchainEvent'> | bigint | number;
  chain?: Prisma.StringWithAggregatesFilter<'BlockchainEvent'> | string;
  tx_hash?: Prisma.StringWithAggregatesFilter<'BlockchainEvent'> | string;
  event_type?: Prisma.StringWithAggregatesFilter<'BlockchainEvent'> | string;
  data?: Prisma.JsonWithAggregatesFilter<'BlockchainEvent'>;
  processed?: Prisma.BoolWithAggregatesFilter<'BlockchainEvent'> | boolean;
  created_at?:
    | Prisma.DateTimeWithAggregatesFilter<'BlockchainEvent'>
    | Date
    | string;
};

export type BlockchainEventCreateInput = {
  id?: bigint | number;
  chain: string;
  tx_hash: string;
  event_type: string;
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  processed?: boolean;
  created_at?: Date | string;
};

export type BlockchainEventUncheckedCreateInput = {
  id?: bigint | number;
  chain: string;
  tx_hash: string;
  event_type: string;
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  processed?: boolean;
  created_at?: Date | string;
};

export type BlockchainEventUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  chain?: Prisma.StringFieldUpdateOperationsInput | string;
  tx_hash?: Prisma.StringFieldUpdateOperationsInput | string;
  event_type?: Prisma.StringFieldUpdateOperationsInput | string;
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  processed?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BlockchainEventUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  chain?: Prisma.StringFieldUpdateOperationsInput | string;
  tx_hash?: Prisma.StringFieldUpdateOperationsInput | string;
  event_type?: Prisma.StringFieldUpdateOperationsInput | string;
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  processed?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BlockchainEventCreateManyInput = {
  id?: bigint | number;
  chain: string;
  tx_hash: string;
  event_type: string;
  data: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  processed?: boolean;
  created_at?: Date | string;
};

export type BlockchainEventUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  chain?: Prisma.StringFieldUpdateOperationsInput | string;
  tx_hash?: Prisma.StringFieldUpdateOperationsInput | string;
  event_type?: Prisma.StringFieldUpdateOperationsInput | string;
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  processed?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BlockchainEventUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  chain?: Prisma.StringFieldUpdateOperationsInput | string;
  tx_hash?: Prisma.StringFieldUpdateOperationsInput | string;
  event_type?: Prisma.StringFieldUpdateOperationsInput | string;
  data?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  processed?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BlockchainEventCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  chain?: Prisma.SortOrder;
  tx_hash?: Prisma.SortOrder;
  event_type?: Prisma.SortOrder;
  data?: Prisma.SortOrder;
  processed?: Prisma.SortOrder;
  created_at?: Prisma.SortOrder;
};

export type BlockchainEventAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type BlockchainEventMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  chain?: Prisma.SortOrder;
  tx_hash?: Prisma.SortOrder;
  event_type?: Prisma.SortOrder;
  processed?: Prisma.SortOrder;
  created_at?: Prisma.SortOrder;
};

export type BlockchainEventMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  chain?: Prisma.SortOrder;
  tx_hash?: Prisma.SortOrder;
  event_type?: Prisma.SortOrder;
  processed?: Prisma.SortOrder;
  created_at?: Prisma.SortOrder;
};

export type BlockchainEventSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
};

export type BlockchainEventSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    chain?: boolean;
    tx_hash?: boolean;
    event_type?: boolean;
    data?: boolean;
    processed?: boolean;
    created_at?: boolean;
  },
  ExtArgs['result']['blockchainEvent']
>;

export type BlockchainEventSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    chain?: boolean;
    tx_hash?: boolean;
    event_type?: boolean;
    data?: boolean;
    processed?: boolean;
    created_at?: boolean;
  },
  ExtArgs['result']['blockchainEvent']
>;

export type BlockchainEventSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    chain?: boolean;
    tx_hash?: boolean;
    event_type?: boolean;
    data?: boolean;
    processed?: boolean;
    created_at?: boolean;
  },
  ExtArgs['result']['blockchainEvent']
>;

export type BlockchainEventSelectScalar = {
  id?: boolean;
  chain?: boolean;
  tx_hash?: boolean;
  event_type?: boolean;
  data?: boolean;
  processed?: boolean;
  created_at?: boolean;
};

export type BlockchainEventOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'chain'
  | 'tx_hash'
  | 'event_type'
  | 'data'
  | 'processed'
  | 'created_at',
  ExtArgs['result']['blockchainEvent']
>;

export type $BlockchainEventPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'BlockchainEvent';
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: bigint;
      chain: string;
      tx_hash: string;
      event_type: string;
      data: runtime.JsonValue;
      processed: boolean;
      created_at: Date;
    },
    ExtArgs['result']['blockchainEvent']
  >;
  composites: {};
};

export type BlockchainEventGetPayload<
  S extends boolean | null | undefined | BlockchainEventDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$BlockchainEventPayload, S>;

export type BlockchainEventCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  BlockchainEventFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: BlockchainEventCountAggregateInputType | true;
};

export interface BlockchainEventDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['BlockchainEvent'];
    meta: { name: 'BlockchainEvent' };
  };
  /**
   * Find zero or one BlockchainEvent that matches the filter.
   * @param {BlockchainEventFindUniqueArgs} args - Arguments to find a BlockchainEvent
   * @example
   * // Get one BlockchainEvent
   * const blockchainEvent = await prisma.blockchainEvent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BlockchainEventFindUniqueArgs>(
    args: Prisma.SelectSubset<T, BlockchainEventFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__BlockchainEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$BlockchainEventPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one BlockchainEvent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BlockchainEventFindUniqueOrThrowArgs} args - Arguments to find a BlockchainEvent
   * @example
   * // Get one BlockchainEvent
   * const blockchainEvent = await prisma.blockchainEvent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BlockchainEventFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, BlockchainEventFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__BlockchainEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$BlockchainEventPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BlockchainEvent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlockchainEventFindFirstArgs} args - Arguments to find a BlockchainEvent
   * @example
   * // Get one BlockchainEvent
   * const blockchainEvent = await prisma.blockchainEvent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BlockchainEventFindFirstArgs>(
    args?: Prisma.SelectSubset<T, BlockchainEventFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__BlockchainEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$BlockchainEventPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first BlockchainEvent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlockchainEventFindFirstOrThrowArgs} args - Arguments to find a BlockchainEvent
   * @example
   * // Get one BlockchainEvent
   * const blockchainEvent = await prisma.blockchainEvent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BlockchainEventFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, BlockchainEventFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__BlockchainEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$BlockchainEventPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more BlockchainEvents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlockchainEventFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all BlockchainEvents
   * const blockchainEvents = await prisma.blockchainEvent.findMany()
   *
   * // Get first 10 BlockchainEvents
   * const blockchainEvents = await prisma.blockchainEvent.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const blockchainEventWithIdOnly = await prisma.blockchainEvent.findMany({ select: { id: true } })
   *
   */
  findMany<T extends BlockchainEventFindManyArgs>(
    args?: Prisma.SelectSubset<T, BlockchainEventFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BlockchainEventPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a BlockchainEvent.
   * @param {BlockchainEventCreateArgs} args - Arguments to create a BlockchainEvent.
   * @example
   * // Create one BlockchainEvent
   * const BlockchainEvent = await prisma.blockchainEvent.create({
   *   data: {
   *     // ... data to create a BlockchainEvent
   *   }
   * })
   *
   */
  create<T extends BlockchainEventCreateArgs>(
    args: Prisma.SelectSubset<T, BlockchainEventCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__BlockchainEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$BlockchainEventPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many BlockchainEvents.
   * @param {BlockchainEventCreateManyArgs} args - Arguments to create many BlockchainEvents.
   * @example
   * // Create many BlockchainEvents
   * const blockchainEvent = await prisma.blockchainEvent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends BlockchainEventCreateManyArgs>(
    args?: Prisma.SelectSubset<T, BlockchainEventCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many BlockchainEvents and returns the data saved in the database.
   * @param {BlockchainEventCreateManyAndReturnArgs} args - Arguments to create many BlockchainEvents.
   * @example
   * // Create many BlockchainEvents
   * const blockchainEvent = await prisma.blockchainEvent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many BlockchainEvents and only return the `id`
   * const blockchainEventWithIdOnly = await prisma.blockchainEvent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends BlockchainEventCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      BlockchainEventCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BlockchainEventPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a BlockchainEvent.
   * @param {BlockchainEventDeleteArgs} args - Arguments to delete one BlockchainEvent.
   * @example
   * // Delete one BlockchainEvent
   * const BlockchainEvent = await prisma.blockchainEvent.delete({
   *   where: {
   *     // ... filter to delete one BlockchainEvent
   *   }
   * })
   *
   */
  delete<T extends BlockchainEventDeleteArgs>(
    args: Prisma.SelectSubset<T, BlockchainEventDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__BlockchainEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$BlockchainEventPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one BlockchainEvent.
   * @param {BlockchainEventUpdateArgs} args - Arguments to update one BlockchainEvent.
   * @example
   * // Update one BlockchainEvent
   * const blockchainEvent = await prisma.blockchainEvent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends BlockchainEventUpdateArgs>(
    args: Prisma.SelectSubset<T, BlockchainEventUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__BlockchainEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$BlockchainEventPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more BlockchainEvents.
   * @param {BlockchainEventDeleteManyArgs} args - Arguments to filter BlockchainEvents to delete.
   * @example
   * // Delete a few BlockchainEvents
   * const { count } = await prisma.blockchainEvent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends BlockchainEventDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, BlockchainEventDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more BlockchainEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlockchainEventUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many BlockchainEvents
   * const blockchainEvent = await prisma.blockchainEvent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends BlockchainEventUpdateManyArgs>(
    args: Prisma.SelectSubset<T, BlockchainEventUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more BlockchainEvents and returns the data updated in the database.
   * @param {BlockchainEventUpdateManyAndReturnArgs} args - Arguments to update many BlockchainEvents.
   * @example
   * // Update many BlockchainEvents
   * const blockchainEvent = await prisma.blockchainEvent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more BlockchainEvents and only return the `id`
   * const blockchainEventWithIdOnly = await prisma.blockchainEvent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends BlockchainEventUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      BlockchainEventUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BlockchainEventPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one BlockchainEvent.
   * @param {BlockchainEventUpsertArgs} args - Arguments to update or create a BlockchainEvent.
   * @example
   * // Update or create a BlockchainEvent
   * const blockchainEvent = await prisma.blockchainEvent.upsert({
   *   create: {
   *     // ... data to create a BlockchainEvent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the BlockchainEvent we want to update
   *   }
   * })
   */
  upsert<T extends BlockchainEventUpsertArgs>(
    args: Prisma.SelectSubset<T, BlockchainEventUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__BlockchainEventClient<
    runtime.Types.Result.GetResult<
      Prisma.$BlockchainEventPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of BlockchainEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlockchainEventCountArgs} args - Arguments to filter BlockchainEvents to count.
   * @example
   * // Count the number of BlockchainEvents
   * const count = await prisma.blockchainEvent.count({
   *   where: {
   *     // ... the filter for the BlockchainEvents we want to count
   *   }
   * })
   **/
  count<T extends BlockchainEventCountArgs>(
    args?: Prisma.Subset<T, BlockchainEventCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            BlockchainEventCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a BlockchainEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlockchainEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends BlockchainEventAggregateArgs>(
    args: Prisma.Subset<T, BlockchainEventAggregateArgs>,
  ): Prisma.PrismaPromise<GetBlockchainEventAggregateType<T>>;

  /**
   * Group by BlockchainEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlockchainEventGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends BlockchainEventGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BlockchainEventGroupByArgs['orderBy'] }
      : { orderBy?: BlockchainEventGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, BlockchainEventGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetBlockchainEventGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the BlockchainEvent model
   */
  readonly fields: BlockchainEventFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for BlockchainEvent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BlockchainEventClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the BlockchainEvent model
 */
export interface BlockchainEventFieldRefs {
  readonly id: Prisma.FieldRef<'BlockchainEvent', 'BigInt'>;
  readonly chain: Prisma.FieldRef<'BlockchainEvent', 'String'>;
  readonly tx_hash: Prisma.FieldRef<'BlockchainEvent', 'String'>;
  readonly event_type: Prisma.FieldRef<'BlockchainEvent', 'String'>;
  readonly data: Prisma.FieldRef<'BlockchainEvent', 'Json'>;
  readonly processed: Prisma.FieldRef<'BlockchainEvent', 'Boolean'>;
  readonly created_at: Prisma.FieldRef<'BlockchainEvent', 'DateTime'>;
}

// Custom InputTypes
/**
 * BlockchainEvent findUnique
 */
export type BlockchainEventFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BlockchainEvent
   */
  select?: Prisma.BlockchainEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BlockchainEvent
   */
  omit?: Prisma.BlockchainEventOmit<ExtArgs> | null;
  /**
   * Filter, which BlockchainEvent to fetch.
   */
  where: Prisma.BlockchainEventWhereUniqueInput;
};

/**
 * BlockchainEvent findUniqueOrThrow
 */
export type BlockchainEventFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BlockchainEvent
   */
  select?: Prisma.BlockchainEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BlockchainEvent
   */
  omit?: Prisma.BlockchainEventOmit<ExtArgs> | null;
  /**
   * Filter, which BlockchainEvent to fetch.
   */
  where: Prisma.BlockchainEventWhereUniqueInput;
};

/**
 * BlockchainEvent findFirst
 */
export type BlockchainEventFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BlockchainEvent
   */
  select?: Prisma.BlockchainEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BlockchainEvent
   */
  omit?: Prisma.BlockchainEventOmit<ExtArgs> | null;
  /**
   * Filter, which BlockchainEvent to fetch.
   */
  where?: Prisma.BlockchainEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BlockchainEvents to fetch.
   */
  orderBy?:
    | Prisma.BlockchainEventOrderByWithRelationInput
    | Prisma.BlockchainEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BlockchainEvents.
   */
  cursor?: Prisma.BlockchainEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BlockchainEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BlockchainEvents.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BlockchainEvents.
   */
  distinct?:
    | Prisma.BlockchainEventScalarFieldEnum
    | Prisma.BlockchainEventScalarFieldEnum[];
};

/**
 * BlockchainEvent findFirstOrThrow
 */
export type BlockchainEventFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BlockchainEvent
   */
  select?: Prisma.BlockchainEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BlockchainEvent
   */
  omit?: Prisma.BlockchainEventOmit<ExtArgs> | null;
  /**
   * Filter, which BlockchainEvent to fetch.
   */
  where?: Prisma.BlockchainEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BlockchainEvents to fetch.
   */
  orderBy?:
    | Prisma.BlockchainEventOrderByWithRelationInput
    | Prisma.BlockchainEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for BlockchainEvents.
   */
  cursor?: Prisma.BlockchainEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BlockchainEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BlockchainEvents.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of BlockchainEvents.
   */
  distinct?:
    | Prisma.BlockchainEventScalarFieldEnum
    | Prisma.BlockchainEventScalarFieldEnum[];
};

/**
 * BlockchainEvent findMany
 */
export type BlockchainEventFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BlockchainEvent
   */
  select?: Prisma.BlockchainEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BlockchainEvent
   */
  omit?: Prisma.BlockchainEventOmit<ExtArgs> | null;
  /**
   * Filter, which BlockchainEvents to fetch.
   */
  where?: Prisma.BlockchainEventWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of BlockchainEvents to fetch.
   */
  orderBy?:
    | Prisma.BlockchainEventOrderByWithRelationInput
    | Prisma.BlockchainEventOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing BlockchainEvents.
   */
  cursor?: Prisma.BlockchainEventWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` BlockchainEvents from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` BlockchainEvents.
   */
  skip?: number;
  distinct?:
    | Prisma.BlockchainEventScalarFieldEnum
    | Prisma.BlockchainEventScalarFieldEnum[];
};

/**
 * BlockchainEvent create
 */
export type BlockchainEventCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BlockchainEvent
   */
  select?: Prisma.BlockchainEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BlockchainEvent
   */
  omit?: Prisma.BlockchainEventOmit<ExtArgs> | null;
  /**
   * The data needed to create a BlockchainEvent.
   */
  data: Prisma.XOR<
    Prisma.BlockchainEventCreateInput,
    Prisma.BlockchainEventUncheckedCreateInput
  >;
};

/**
 * BlockchainEvent createMany
 */
export type BlockchainEventCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many BlockchainEvents.
   */
  data:
    | Prisma.BlockchainEventCreateManyInput
    | Prisma.BlockchainEventCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * BlockchainEvent createManyAndReturn
 */
export type BlockchainEventCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BlockchainEvent
   */
  select?: Prisma.BlockchainEventSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the BlockchainEvent
   */
  omit?: Prisma.BlockchainEventOmit<ExtArgs> | null;
  /**
   * The data used to create many BlockchainEvents.
   */
  data:
    | Prisma.BlockchainEventCreateManyInput
    | Prisma.BlockchainEventCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * BlockchainEvent update
 */
export type BlockchainEventUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BlockchainEvent
   */
  select?: Prisma.BlockchainEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BlockchainEvent
   */
  omit?: Prisma.BlockchainEventOmit<ExtArgs> | null;
  /**
   * The data needed to update a BlockchainEvent.
   */
  data: Prisma.XOR<
    Prisma.BlockchainEventUpdateInput,
    Prisma.BlockchainEventUncheckedUpdateInput
  >;
  /**
   * Choose, which BlockchainEvent to update.
   */
  where: Prisma.BlockchainEventWhereUniqueInput;
};

/**
 * BlockchainEvent updateMany
 */
export type BlockchainEventUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update BlockchainEvents.
   */
  data: Prisma.XOR<
    Prisma.BlockchainEventUpdateManyMutationInput,
    Prisma.BlockchainEventUncheckedUpdateManyInput
  >;
  /**
   * Filter which BlockchainEvents to update
   */
  where?: Prisma.BlockchainEventWhereInput;
  /**
   * Limit how many BlockchainEvents to update.
   */
  limit?: number;
};

/**
 * BlockchainEvent updateManyAndReturn
 */
export type BlockchainEventUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BlockchainEvent
   */
  select?: Prisma.BlockchainEventSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the BlockchainEvent
   */
  omit?: Prisma.BlockchainEventOmit<ExtArgs> | null;
  /**
   * The data used to update BlockchainEvents.
   */
  data: Prisma.XOR<
    Prisma.BlockchainEventUpdateManyMutationInput,
    Prisma.BlockchainEventUncheckedUpdateManyInput
  >;
  /**
   * Filter which BlockchainEvents to update
   */
  where?: Prisma.BlockchainEventWhereInput;
  /**
   * Limit how many BlockchainEvents to update.
   */
  limit?: number;
};

/**
 * BlockchainEvent upsert
 */
export type BlockchainEventUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BlockchainEvent
   */
  select?: Prisma.BlockchainEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BlockchainEvent
   */
  omit?: Prisma.BlockchainEventOmit<ExtArgs> | null;
  /**
   * The filter to search for the BlockchainEvent to update in case it exists.
   */
  where: Prisma.BlockchainEventWhereUniqueInput;
  /**
   * In case the BlockchainEvent found by the `where` argument doesn't exist, create a new BlockchainEvent with this data.
   */
  create: Prisma.XOR<
    Prisma.BlockchainEventCreateInput,
    Prisma.BlockchainEventUncheckedCreateInput
  >;
  /**
   * In case the BlockchainEvent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.BlockchainEventUpdateInput,
    Prisma.BlockchainEventUncheckedUpdateInput
  >;
};

/**
 * BlockchainEvent delete
 */
export type BlockchainEventDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BlockchainEvent
   */
  select?: Prisma.BlockchainEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BlockchainEvent
   */
  omit?: Prisma.BlockchainEventOmit<ExtArgs> | null;
  /**
   * Filter which BlockchainEvent to delete.
   */
  where: Prisma.BlockchainEventWhereUniqueInput;
};

/**
 * BlockchainEvent deleteMany
 */
export type BlockchainEventDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which BlockchainEvents to delete
   */
  where?: Prisma.BlockchainEventWhereInput;
  /**
   * Limit how many BlockchainEvents to delete.
   */
  limit?: number;
};

/**
 * BlockchainEvent without action
 */
export type BlockchainEventDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the BlockchainEvent
   */
  select?: Prisma.BlockchainEventSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the BlockchainEvent
   */
  omit?: Prisma.BlockchainEventOmit<ExtArgs> | null;
};
