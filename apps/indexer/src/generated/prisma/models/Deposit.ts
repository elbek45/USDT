
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Deposit` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Deposit
 * 
 */
export type DepositModel = runtime.Types.Result.DefaultSelection<Prisma.$DepositPayload>

export type AggregateDeposit = {
  _count: DepositCountAggregateOutputType | null
  _avg: DepositAvgAggregateOutputType | null
  _sum: DepositSumAggregateOutputType | null
  _min: DepositMinAggregateOutputType | null
  _max: DepositMaxAggregateOutputType | null
}

export type DepositAvgAggregateOutputType = {
  id: number | null
  pool_id: number | null
  amount_usd: number | null
  wexel_id: number | null
}

export type DepositSumAggregateOutputType = {
  id: bigint | null
  pool_id: number | null
  amount_usd: bigint | null
  wexel_id: bigint | null
}

export type DepositMinAggregateOutputType = {
  id: bigint | null
  pool_id: number | null
  user_address: string | null
  amount_usd: bigint | null
  wexel_id: bigint | null
  tx_hash: string | null
  status: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type DepositMaxAggregateOutputType = {
  id: bigint | null
  pool_id: number | null
  user_address: string | null
  amount_usd: bigint | null
  wexel_id: bigint | null
  tx_hash: string | null
  status: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type DepositCountAggregateOutputType = {
  id: number
  pool_id: number
  user_address: number
  amount_usd: number
  wexel_id: number
  tx_hash: number
  status: number
  created_at: number
  updated_at: number
  _all: number
}


export type DepositAvgAggregateInputType = {
  id?: true
  pool_id?: true
  amount_usd?: true
  wexel_id?: true
}

export type DepositSumAggregateInputType = {
  id?: true
  pool_id?: true
  amount_usd?: true
  wexel_id?: true
}

export type DepositMinAggregateInputType = {
  id?: true
  pool_id?: true
  user_address?: true
  amount_usd?: true
  wexel_id?: true
  tx_hash?: true
  status?: true
  created_at?: true
  updated_at?: true
}

export type DepositMaxAggregateInputType = {
  id?: true
  pool_id?: true
  user_address?: true
  amount_usd?: true
  wexel_id?: true
  tx_hash?: true
  status?: true
  created_at?: true
  updated_at?: true
}

export type DepositCountAggregateInputType = {
  id?: true
  pool_id?: true
  user_address?: true
  amount_usd?: true
  wexel_id?: true
  tx_hash?: true
  status?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type DepositAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Deposit to aggregate.
   */
  where?: Prisma.DepositWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Deposits to fetch.
   */
  orderBy?: Prisma.DepositOrderByWithRelationInput | Prisma.DepositOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DepositWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Deposits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Deposits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Deposits
  **/
  _count?: true | DepositCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DepositAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DepositSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DepositMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DepositMaxAggregateInputType
}

export type GetDepositAggregateType<T extends DepositAggregateArgs> = {
      [P in keyof T & keyof AggregateDeposit]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDeposit[P]>
    : Prisma.GetScalarType<T[P], AggregateDeposit[P]>
}




export type DepositGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DepositWhereInput
  orderBy?: Prisma.DepositOrderByWithAggregationInput | Prisma.DepositOrderByWithAggregationInput[]
  by: Prisma.DepositScalarFieldEnum[] | Prisma.DepositScalarFieldEnum
  having?: Prisma.DepositScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DepositCountAggregateInputType | true
  _avg?: DepositAvgAggregateInputType
  _sum?: DepositSumAggregateInputType
  _min?: DepositMinAggregateInputType
  _max?: DepositMaxAggregateInputType
}

export type DepositGroupByOutputType = {
  id: bigint
  pool_id: number
  user_address: string
  amount_usd: bigint
  wexel_id: bigint | null
  tx_hash: string | null
  status: string
  created_at: Date
  updated_at: Date
  _count: DepositCountAggregateOutputType | null
  _avg: DepositAvgAggregateOutputType | null
  _sum: DepositSumAggregateOutputType | null
  _min: DepositMinAggregateOutputType | null
  _max: DepositMaxAggregateOutputType | null
}

type GetDepositGroupByPayload<T extends DepositGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DepositGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DepositGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DepositGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DepositGroupByOutputType[P]>
      }
    >
  >



export type DepositWhereInput = {
  AND?: Prisma.DepositWhereInput | Prisma.DepositWhereInput[]
  OR?: Prisma.DepositWhereInput[]
  NOT?: Prisma.DepositWhereInput | Prisma.DepositWhereInput[]
  id?: Prisma.BigIntFilter<"Deposit"> | bigint | number
  pool_id?: Prisma.IntFilter<"Deposit"> | number
  user_address?: Prisma.StringFilter<"Deposit"> | string
  amount_usd?: Prisma.BigIntFilter<"Deposit"> | bigint | number
  wexel_id?: Prisma.BigIntNullableFilter<"Deposit"> | bigint | number | null
  tx_hash?: Prisma.StringNullableFilter<"Deposit"> | string | null
  status?: Prisma.StringFilter<"Deposit"> | string
  created_at?: Prisma.DateTimeFilter<"Deposit"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Deposit"> | Date | string
  pool?: Prisma.XOR<Prisma.PoolScalarRelationFilter, Prisma.PoolWhereInput>
}

export type DepositOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  pool_id?: Prisma.SortOrder
  user_address?: Prisma.SortOrder
  amount_usd?: Prisma.SortOrder
  wexel_id?: Prisma.SortOrderInput | Prisma.SortOrder
  tx_hash?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  pool?: Prisma.PoolOrderByWithRelationInput
}

export type DepositWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.DepositWhereInput | Prisma.DepositWhereInput[]
  OR?: Prisma.DepositWhereInput[]
  NOT?: Prisma.DepositWhereInput | Prisma.DepositWhereInput[]
  pool_id?: Prisma.IntFilter<"Deposit"> | number
  user_address?: Prisma.StringFilter<"Deposit"> | string
  amount_usd?: Prisma.BigIntFilter<"Deposit"> | bigint | number
  wexel_id?: Prisma.BigIntNullableFilter<"Deposit"> | bigint | number | null
  tx_hash?: Prisma.StringNullableFilter<"Deposit"> | string | null
  status?: Prisma.StringFilter<"Deposit"> | string
  created_at?: Prisma.DateTimeFilter<"Deposit"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Deposit"> | Date | string
  pool?: Prisma.XOR<Prisma.PoolScalarRelationFilter, Prisma.PoolWhereInput>
}, "id">

export type DepositOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  pool_id?: Prisma.SortOrder
  user_address?: Prisma.SortOrder
  amount_usd?: Prisma.SortOrder
  wexel_id?: Prisma.SortOrderInput | Prisma.SortOrder
  tx_hash?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  _count?: Prisma.DepositCountOrderByAggregateInput
  _avg?: Prisma.DepositAvgOrderByAggregateInput
  _max?: Prisma.DepositMaxOrderByAggregateInput
  _min?: Prisma.DepositMinOrderByAggregateInput
  _sum?: Prisma.DepositSumOrderByAggregateInput
}

export type DepositScalarWhereWithAggregatesInput = {
  AND?: Prisma.DepositScalarWhereWithAggregatesInput | Prisma.DepositScalarWhereWithAggregatesInput[]
  OR?: Prisma.DepositScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DepositScalarWhereWithAggregatesInput | Prisma.DepositScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"Deposit"> | bigint | number
  pool_id?: Prisma.IntWithAggregatesFilter<"Deposit"> | number
  user_address?: Prisma.StringWithAggregatesFilter<"Deposit"> | string
  amount_usd?: Prisma.BigIntWithAggregatesFilter<"Deposit"> | bigint | number
  wexel_id?: Prisma.BigIntNullableWithAggregatesFilter<"Deposit"> | bigint | number | null
  tx_hash?: Prisma.StringNullableWithAggregatesFilter<"Deposit"> | string | null
  status?: Prisma.StringWithAggregatesFilter<"Deposit"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"Deposit"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"Deposit"> | Date | string
}

export type DepositCreateInput = {
  id?: bigint | number
  user_address: string
  amount_usd: bigint | number
  wexel_id?: bigint | number | null
  tx_hash?: string | null
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
  pool: Prisma.PoolCreateNestedOneWithoutDepositsInput
}

export type DepositUncheckedCreateInput = {
  id?: bigint | number
  pool_id: number
  user_address: string
  amount_usd: bigint | number
  wexel_id?: bigint | number | null
  tx_hash?: string | null
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type DepositUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_address?: Prisma.StringFieldUpdateOperationsInput | string
  amount_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  wexel_id?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  tx_hash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pool?: Prisma.PoolUpdateOneRequiredWithoutDepositsNestedInput
}

export type DepositUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  pool_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_address?: Prisma.StringFieldUpdateOperationsInput | string
  amount_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  wexel_id?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  tx_hash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DepositCreateManyInput = {
  id?: bigint | number
  pool_id: number
  user_address: string
  amount_usd: bigint | number
  wexel_id?: bigint | number | null
  tx_hash?: string | null
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type DepositUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_address?: Prisma.StringFieldUpdateOperationsInput | string
  amount_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  wexel_id?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  tx_hash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DepositUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  pool_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_address?: Prisma.StringFieldUpdateOperationsInput | string
  amount_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  wexel_id?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  tx_hash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DepositListRelationFilter = {
  every?: Prisma.DepositWhereInput
  some?: Prisma.DepositWhereInput
  none?: Prisma.DepositWhereInput
}

export type DepositOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DepositCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pool_id?: Prisma.SortOrder
  user_address?: Prisma.SortOrder
  amount_usd?: Prisma.SortOrder
  wexel_id?: Prisma.SortOrder
  tx_hash?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type DepositAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pool_id?: Prisma.SortOrder
  amount_usd?: Prisma.SortOrder
  wexel_id?: Prisma.SortOrder
}

export type DepositMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pool_id?: Prisma.SortOrder
  user_address?: Prisma.SortOrder
  amount_usd?: Prisma.SortOrder
  wexel_id?: Prisma.SortOrder
  tx_hash?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type DepositMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pool_id?: Prisma.SortOrder
  user_address?: Prisma.SortOrder
  amount_usd?: Prisma.SortOrder
  wexel_id?: Prisma.SortOrder
  tx_hash?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type DepositSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pool_id?: Prisma.SortOrder
  amount_usd?: Prisma.SortOrder
  wexel_id?: Prisma.SortOrder
}

export type DepositCreateNestedManyWithoutPoolInput = {
  create?: Prisma.XOR<Prisma.DepositCreateWithoutPoolInput, Prisma.DepositUncheckedCreateWithoutPoolInput> | Prisma.DepositCreateWithoutPoolInput[] | Prisma.DepositUncheckedCreateWithoutPoolInput[]
  connectOrCreate?: Prisma.DepositCreateOrConnectWithoutPoolInput | Prisma.DepositCreateOrConnectWithoutPoolInput[]
  createMany?: Prisma.DepositCreateManyPoolInputEnvelope
  connect?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
}

export type DepositUncheckedCreateNestedManyWithoutPoolInput = {
  create?: Prisma.XOR<Prisma.DepositCreateWithoutPoolInput, Prisma.DepositUncheckedCreateWithoutPoolInput> | Prisma.DepositCreateWithoutPoolInput[] | Prisma.DepositUncheckedCreateWithoutPoolInput[]
  connectOrCreate?: Prisma.DepositCreateOrConnectWithoutPoolInput | Prisma.DepositCreateOrConnectWithoutPoolInput[]
  createMany?: Prisma.DepositCreateManyPoolInputEnvelope
  connect?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
}

export type DepositUpdateManyWithoutPoolNestedInput = {
  create?: Prisma.XOR<Prisma.DepositCreateWithoutPoolInput, Prisma.DepositUncheckedCreateWithoutPoolInput> | Prisma.DepositCreateWithoutPoolInput[] | Prisma.DepositUncheckedCreateWithoutPoolInput[]
  connectOrCreate?: Prisma.DepositCreateOrConnectWithoutPoolInput | Prisma.DepositCreateOrConnectWithoutPoolInput[]
  upsert?: Prisma.DepositUpsertWithWhereUniqueWithoutPoolInput | Prisma.DepositUpsertWithWhereUniqueWithoutPoolInput[]
  createMany?: Prisma.DepositCreateManyPoolInputEnvelope
  set?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  disconnect?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  delete?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  connect?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  update?: Prisma.DepositUpdateWithWhereUniqueWithoutPoolInput | Prisma.DepositUpdateWithWhereUniqueWithoutPoolInput[]
  updateMany?: Prisma.DepositUpdateManyWithWhereWithoutPoolInput | Prisma.DepositUpdateManyWithWhereWithoutPoolInput[]
  deleteMany?: Prisma.DepositScalarWhereInput | Prisma.DepositScalarWhereInput[]
}

export type DepositUncheckedUpdateManyWithoutPoolNestedInput = {
  create?: Prisma.XOR<Prisma.DepositCreateWithoutPoolInput, Prisma.DepositUncheckedCreateWithoutPoolInput> | Prisma.DepositCreateWithoutPoolInput[] | Prisma.DepositUncheckedCreateWithoutPoolInput[]
  connectOrCreate?: Prisma.DepositCreateOrConnectWithoutPoolInput | Prisma.DepositCreateOrConnectWithoutPoolInput[]
  upsert?: Prisma.DepositUpsertWithWhereUniqueWithoutPoolInput | Prisma.DepositUpsertWithWhereUniqueWithoutPoolInput[]
  createMany?: Prisma.DepositCreateManyPoolInputEnvelope
  set?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  disconnect?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  delete?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  connect?: Prisma.DepositWhereUniqueInput | Prisma.DepositWhereUniqueInput[]
  update?: Prisma.DepositUpdateWithWhereUniqueWithoutPoolInput | Prisma.DepositUpdateWithWhereUniqueWithoutPoolInput[]
  updateMany?: Prisma.DepositUpdateManyWithWhereWithoutPoolInput | Prisma.DepositUpdateManyWithWhereWithoutPoolInput[]
  deleteMany?: Prisma.DepositScalarWhereInput | Prisma.DepositScalarWhereInput[]
}

export type DepositCreateWithoutPoolInput = {
  id?: bigint | number
  user_address: string
  amount_usd: bigint | number
  wexel_id?: bigint | number | null
  tx_hash?: string | null
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type DepositUncheckedCreateWithoutPoolInput = {
  id?: bigint | number
  user_address: string
  amount_usd: bigint | number
  wexel_id?: bigint | number | null
  tx_hash?: string | null
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type DepositCreateOrConnectWithoutPoolInput = {
  where: Prisma.DepositWhereUniqueInput
  create: Prisma.XOR<Prisma.DepositCreateWithoutPoolInput, Prisma.DepositUncheckedCreateWithoutPoolInput>
}

export type DepositCreateManyPoolInputEnvelope = {
  data: Prisma.DepositCreateManyPoolInput | Prisma.DepositCreateManyPoolInput[]
  skipDuplicates?: boolean
}

export type DepositUpsertWithWhereUniqueWithoutPoolInput = {
  where: Prisma.DepositWhereUniqueInput
  update: Prisma.XOR<Prisma.DepositUpdateWithoutPoolInput, Prisma.DepositUncheckedUpdateWithoutPoolInput>
  create: Prisma.XOR<Prisma.DepositCreateWithoutPoolInput, Prisma.DepositUncheckedCreateWithoutPoolInput>
}

export type DepositUpdateWithWhereUniqueWithoutPoolInput = {
  where: Prisma.DepositWhereUniqueInput
  data: Prisma.XOR<Prisma.DepositUpdateWithoutPoolInput, Prisma.DepositUncheckedUpdateWithoutPoolInput>
}

export type DepositUpdateManyWithWhereWithoutPoolInput = {
  where: Prisma.DepositScalarWhereInput
  data: Prisma.XOR<Prisma.DepositUpdateManyMutationInput, Prisma.DepositUncheckedUpdateManyWithoutPoolInput>
}

export type DepositScalarWhereInput = {
  AND?: Prisma.DepositScalarWhereInput | Prisma.DepositScalarWhereInput[]
  OR?: Prisma.DepositScalarWhereInput[]
  NOT?: Prisma.DepositScalarWhereInput | Prisma.DepositScalarWhereInput[]
  id?: Prisma.BigIntFilter<"Deposit"> | bigint | number
  pool_id?: Prisma.IntFilter<"Deposit"> | number
  user_address?: Prisma.StringFilter<"Deposit"> | string
  amount_usd?: Prisma.BigIntFilter<"Deposit"> | bigint | number
  wexel_id?: Prisma.BigIntNullableFilter<"Deposit"> | bigint | number | null
  tx_hash?: Prisma.StringNullableFilter<"Deposit"> | string | null
  status?: Prisma.StringFilter<"Deposit"> | string
  created_at?: Prisma.DateTimeFilter<"Deposit"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Deposit"> | Date | string
}

export type DepositCreateManyPoolInput = {
  id?: bigint | number
  user_address: string
  amount_usd: bigint | number
  wexel_id?: bigint | number | null
  tx_hash?: string | null
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type DepositUpdateWithoutPoolInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_address?: Prisma.StringFieldUpdateOperationsInput | string
  amount_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  wexel_id?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  tx_hash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DepositUncheckedUpdateWithoutPoolInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_address?: Prisma.StringFieldUpdateOperationsInput | string
  amount_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  wexel_id?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  tx_hash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DepositUncheckedUpdateManyWithoutPoolInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_address?: Prisma.StringFieldUpdateOperationsInput | string
  amount_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  wexel_id?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  tx_hash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type DepositSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pool_id?: boolean
  user_address?: boolean
  amount_usd?: boolean
  wexel_id?: boolean
  tx_hash?: boolean
  status?: boolean
  created_at?: boolean
  updated_at?: boolean
  pool?: boolean | Prisma.PoolDefaultArgs<ExtArgs>
}, ExtArgs["result"]["deposit"]>

export type DepositSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pool_id?: boolean
  user_address?: boolean
  amount_usd?: boolean
  wexel_id?: boolean
  tx_hash?: boolean
  status?: boolean
  created_at?: boolean
  updated_at?: boolean
  pool?: boolean | Prisma.PoolDefaultArgs<ExtArgs>
}, ExtArgs["result"]["deposit"]>

export type DepositSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pool_id?: boolean
  user_address?: boolean
  amount_usd?: boolean
  wexel_id?: boolean
  tx_hash?: boolean
  status?: boolean
  created_at?: boolean
  updated_at?: boolean
  pool?: boolean | Prisma.PoolDefaultArgs<ExtArgs>
}, ExtArgs["result"]["deposit"]>

export type DepositSelectScalar = {
  id?: boolean
  pool_id?: boolean
  user_address?: boolean
  amount_usd?: boolean
  wexel_id?: boolean
  tx_hash?: boolean
  status?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type DepositOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "pool_id" | "user_address" | "amount_usd" | "wexel_id" | "tx_hash" | "status" | "created_at" | "updated_at", ExtArgs["result"]["deposit"]>
export type DepositInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  pool?: boolean | Prisma.PoolDefaultArgs<ExtArgs>
}
export type DepositIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  pool?: boolean | Prisma.PoolDefaultArgs<ExtArgs>
}
export type DepositIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  pool?: boolean | Prisma.PoolDefaultArgs<ExtArgs>
}

export type $DepositPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Deposit"
  objects: {
    pool: Prisma.$PoolPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    pool_id: number
    user_address: string
    amount_usd: bigint
    wexel_id: bigint | null
    tx_hash: string | null
    status: string
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["deposit"]>
  composites: {}
}

export type DepositGetPayload<S extends boolean | null | undefined | DepositDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DepositPayload, S>

export type DepositCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DepositFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DepositCountAggregateInputType | true
  }

export interface DepositDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Deposit'], meta: { name: 'Deposit' } }
  /**
   * Find zero or one Deposit that matches the filter.
   * @param {DepositFindUniqueArgs} args - Arguments to find a Deposit
   * @example
   * // Get one Deposit
   * const deposit = await prisma.deposit.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DepositFindUniqueArgs>(args: Prisma.SelectSubset<T, DepositFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Deposit that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DepositFindUniqueOrThrowArgs} args - Arguments to find a Deposit
   * @example
   * // Get one Deposit
   * const deposit = await prisma.deposit.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DepositFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DepositFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Deposit that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepositFindFirstArgs} args - Arguments to find a Deposit
   * @example
   * // Get one Deposit
   * const deposit = await prisma.deposit.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DepositFindFirstArgs>(args?: Prisma.SelectSubset<T, DepositFindFirstArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Deposit that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepositFindFirstOrThrowArgs} args - Arguments to find a Deposit
   * @example
   * // Get one Deposit
   * const deposit = await prisma.deposit.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DepositFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DepositFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Deposits that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepositFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Deposits
   * const deposits = await prisma.deposit.findMany()
   * 
   * // Get first 10 Deposits
   * const deposits = await prisma.deposit.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const depositWithIdOnly = await prisma.deposit.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DepositFindManyArgs>(args?: Prisma.SelectSubset<T, DepositFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Deposit.
   * @param {DepositCreateArgs} args - Arguments to create a Deposit.
   * @example
   * // Create one Deposit
   * const Deposit = await prisma.deposit.create({
   *   data: {
   *     // ... data to create a Deposit
   *   }
   * })
   * 
   */
  create<T extends DepositCreateArgs>(args: Prisma.SelectSubset<T, DepositCreateArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Deposits.
   * @param {DepositCreateManyArgs} args - Arguments to create many Deposits.
   * @example
   * // Create many Deposits
   * const deposit = await prisma.deposit.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DepositCreateManyArgs>(args?: Prisma.SelectSubset<T, DepositCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Deposits and returns the data saved in the database.
   * @param {DepositCreateManyAndReturnArgs} args - Arguments to create many Deposits.
   * @example
   * // Create many Deposits
   * const deposit = await prisma.deposit.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Deposits and only return the `id`
   * const depositWithIdOnly = await prisma.deposit.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DepositCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DepositCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Deposit.
   * @param {DepositDeleteArgs} args - Arguments to delete one Deposit.
   * @example
   * // Delete one Deposit
   * const Deposit = await prisma.deposit.delete({
   *   where: {
   *     // ... filter to delete one Deposit
   *   }
   * })
   * 
   */
  delete<T extends DepositDeleteArgs>(args: Prisma.SelectSubset<T, DepositDeleteArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Deposit.
   * @param {DepositUpdateArgs} args - Arguments to update one Deposit.
   * @example
   * // Update one Deposit
   * const deposit = await prisma.deposit.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DepositUpdateArgs>(args: Prisma.SelectSubset<T, DepositUpdateArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Deposits.
   * @param {DepositDeleteManyArgs} args - Arguments to filter Deposits to delete.
   * @example
   * // Delete a few Deposits
   * const { count } = await prisma.deposit.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DepositDeleteManyArgs>(args?: Prisma.SelectSubset<T, DepositDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Deposits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepositUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Deposits
   * const deposit = await prisma.deposit.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DepositUpdateManyArgs>(args: Prisma.SelectSubset<T, DepositUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Deposits and returns the data updated in the database.
   * @param {DepositUpdateManyAndReturnArgs} args - Arguments to update many Deposits.
   * @example
   * // Update many Deposits
   * const deposit = await prisma.deposit.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Deposits and only return the `id`
   * const depositWithIdOnly = await prisma.deposit.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DepositUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DepositUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Deposit.
   * @param {DepositUpsertArgs} args - Arguments to update or create a Deposit.
   * @example
   * // Update or create a Deposit
   * const deposit = await prisma.deposit.upsert({
   *   create: {
   *     // ... data to create a Deposit
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Deposit we want to update
   *   }
   * })
   */
  upsert<T extends DepositUpsertArgs>(args: Prisma.SelectSubset<T, DepositUpsertArgs<ExtArgs>>): Prisma.Prisma__DepositClient<runtime.Types.Result.GetResult<Prisma.$DepositPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Deposits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepositCountArgs} args - Arguments to filter Deposits to count.
   * @example
   * // Count the number of Deposits
   * const count = await prisma.deposit.count({
   *   where: {
   *     // ... the filter for the Deposits we want to count
   *   }
   * })
  **/
  count<T extends DepositCountArgs>(
    args?: Prisma.Subset<T, DepositCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DepositCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Deposit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepositAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DepositAggregateArgs>(args: Prisma.Subset<T, DepositAggregateArgs>): Prisma.PrismaPromise<GetDepositAggregateType<T>>

  /**
   * Group by Deposit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepositGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DepositGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DepositGroupByArgs['orderBy'] }
      : { orderBy?: DepositGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DepositGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepositGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Deposit model
 */
readonly fields: DepositFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Deposit.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DepositClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  pool<T extends Prisma.PoolDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PoolDefaultArgs<ExtArgs>>): Prisma.Prisma__PoolClient<runtime.Types.Result.GetResult<Prisma.$PoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Deposit model
 */
export interface DepositFieldRefs {
  readonly id: Prisma.FieldRef<"Deposit", 'BigInt'>
  readonly pool_id: Prisma.FieldRef<"Deposit", 'Int'>
  readonly user_address: Prisma.FieldRef<"Deposit", 'String'>
  readonly amount_usd: Prisma.FieldRef<"Deposit", 'BigInt'>
  readonly wexel_id: Prisma.FieldRef<"Deposit", 'BigInt'>
  readonly tx_hash: Prisma.FieldRef<"Deposit", 'String'>
  readonly status: Prisma.FieldRef<"Deposit", 'String'>
  readonly created_at: Prisma.FieldRef<"Deposit", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"Deposit", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Deposit findUnique
 */
export type DepositFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * Filter, which Deposit to fetch.
   */
  where: Prisma.DepositWhereUniqueInput
}

/**
 * Deposit findUniqueOrThrow
 */
export type DepositFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * Filter, which Deposit to fetch.
   */
  where: Prisma.DepositWhereUniqueInput
}

/**
 * Deposit findFirst
 */
export type DepositFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * Filter, which Deposit to fetch.
   */
  where?: Prisma.DepositWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Deposits to fetch.
   */
  orderBy?: Prisma.DepositOrderByWithRelationInput | Prisma.DepositOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Deposits.
   */
  cursor?: Prisma.DepositWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Deposits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Deposits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Deposits.
   */
  distinct?: Prisma.DepositScalarFieldEnum | Prisma.DepositScalarFieldEnum[]
}

/**
 * Deposit findFirstOrThrow
 */
export type DepositFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * Filter, which Deposit to fetch.
   */
  where?: Prisma.DepositWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Deposits to fetch.
   */
  orderBy?: Prisma.DepositOrderByWithRelationInput | Prisma.DepositOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Deposits.
   */
  cursor?: Prisma.DepositWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Deposits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Deposits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Deposits.
   */
  distinct?: Prisma.DepositScalarFieldEnum | Prisma.DepositScalarFieldEnum[]
}

/**
 * Deposit findMany
 */
export type DepositFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * Filter, which Deposits to fetch.
   */
  where?: Prisma.DepositWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Deposits to fetch.
   */
  orderBy?: Prisma.DepositOrderByWithRelationInput | Prisma.DepositOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Deposits.
   */
  cursor?: Prisma.DepositWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Deposits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Deposits.
   */
  skip?: number
  distinct?: Prisma.DepositScalarFieldEnum | Prisma.DepositScalarFieldEnum[]
}

/**
 * Deposit create
 */
export type DepositCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * The data needed to create a Deposit.
   */
  data: Prisma.XOR<Prisma.DepositCreateInput, Prisma.DepositUncheckedCreateInput>
}

/**
 * Deposit createMany
 */
export type DepositCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Deposits.
   */
  data: Prisma.DepositCreateManyInput | Prisma.DepositCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Deposit createManyAndReturn
 */
export type DepositCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * The data used to create many Deposits.
   */
  data: Prisma.DepositCreateManyInput | Prisma.DepositCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Deposit update
 */
export type DepositUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * The data needed to update a Deposit.
   */
  data: Prisma.XOR<Prisma.DepositUpdateInput, Prisma.DepositUncheckedUpdateInput>
  /**
   * Choose, which Deposit to update.
   */
  where: Prisma.DepositWhereUniqueInput
}

/**
 * Deposit updateMany
 */
export type DepositUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Deposits.
   */
  data: Prisma.XOR<Prisma.DepositUpdateManyMutationInput, Prisma.DepositUncheckedUpdateManyInput>
  /**
   * Filter which Deposits to update
   */
  where?: Prisma.DepositWhereInput
  /**
   * Limit how many Deposits to update.
   */
  limit?: number
}

/**
 * Deposit updateManyAndReturn
 */
export type DepositUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * The data used to update Deposits.
   */
  data: Prisma.XOR<Prisma.DepositUpdateManyMutationInput, Prisma.DepositUncheckedUpdateManyInput>
  /**
   * Filter which Deposits to update
   */
  where?: Prisma.DepositWhereInput
  /**
   * Limit how many Deposits to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Deposit upsert
 */
export type DepositUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * The filter to search for the Deposit to update in case it exists.
   */
  where: Prisma.DepositWhereUniqueInput
  /**
   * In case the Deposit found by the `where` argument doesn't exist, create a new Deposit with this data.
   */
  create: Prisma.XOR<Prisma.DepositCreateInput, Prisma.DepositUncheckedCreateInput>
  /**
   * In case the Deposit was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DepositUpdateInput, Prisma.DepositUncheckedUpdateInput>
}

/**
 * Deposit delete
 */
export type DepositDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
  /**
   * Filter which Deposit to delete.
   */
  where: Prisma.DepositWhereUniqueInput
}

/**
 * Deposit deleteMany
 */
export type DepositDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Deposits to delete
   */
  where?: Prisma.DepositWhereInput
  /**
   * Limit how many Deposits to delete.
   */
  limit?: number
}

/**
 * Deposit without action
 */
export type DepositDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deposit
   */
  select?: Prisma.DepositSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deposit
   */
  omit?: Prisma.DepositOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DepositInclude<ExtArgs> | null
}
