/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `Boost` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums.js';
import type * as Prisma from '../internal/prismaNamespace.js';

/**
 * Model Boost
 *
 */
export type BoostModel =
  runtime.Types.Result.DefaultSelection<Prisma.$BoostPayload>;

export type AggregateBoost = {
  _count: BoostCountAggregateOutputType | null;
  _avg: BoostAvgAggregateOutputType | null;
  _sum: BoostSumAggregateOutputType | null;
  _min: BoostMinAggregateOutputType | null;
  _max: BoostMaxAggregateOutputType | null;
};

export type BoostAvgAggregateOutputType = {
  id: number | null;
  wexel_id: number | null;
  amount: number | null;
  value_usd: number | null;
  apy_boost_bp: number | null;
  price_usd: number | null;
};

export type BoostSumAggregateOutputType = {
  id: bigint | null;
  wexel_id: bigint | null;
  amount: bigint | null;
  value_usd: bigint | null;
  apy_boost_bp: number | null;
  price_usd: bigint | null;
};

export type BoostMinAggregateOutputType = {
  id: bigint | null;
  wexel_id: bigint | null;
  token_mint: string | null;
  amount: bigint | null;
  value_usd: bigint | null;
  apy_boost_bp: number | null;
  price_usd: bigint | null;
  created_at: Date | null;
};

export type BoostMaxAggregateOutputType = {
  id: bigint | null;
  wexel_id: bigint | null;
  token_mint: string | null;
  amount: bigint | null;
  value_usd: bigint | null;
  apy_boost_bp: number | null;
  price_usd: bigint | null;
  created_at: Date | null;
};

export type BoostCountAggregateOutputType = {
  id: number;
  wexel_id: number;
  token_mint: number;
  amount: number;
  value_usd: number;
  apy_boost_bp: number;
  price_usd: number;
  created_at: number;
  _all: number;
};

export type BoostAvgAggregateInputType = {
  id?: true;
  wexel_id?: true;
  amount?: true;
  value_usd?: true;
  apy_boost_bp?: true;
  price_usd?: true;
};

export type BoostSumAggregateInputType = {
  id?: true;
  wexel_id?: true;
  amount?: true;
  value_usd?: true;
  apy_boost_bp?: true;
  price_usd?: true;
};

export type BoostMinAggregateInputType = {
  id?: true;
  wexel_id?: true;
  token_mint?: true;
  amount?: true;
  value_usd?: true;
  apy_boost_bp?: true;
  price_usd?: true;
  created_at?: true;
};

export type BoostMaxAggregateInputType = {
  id?: true;
  wexel_id?: true;
  token_mint?: true;
  amount?: true;
  value_usd?: true;
  apy_boost_bp?: true;
  price_usd?: true;
  created_at?: true;
};

export type BoostCountAggregateInputType = {
  id?: true;
  wexel_id?: true;
  token_mint?: true;
  amount?: true;
  value_usd?: true;
  apy_boost_bp?: true;
  price_usd?: true;
  created_at?: true;
  _all?: true;
};

export type BoostAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Boost to aggregate.
   */
  where?: Prisma.BoostWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Boosts to fetch.
   */
  orderBy?:
    | Prisma.BoostOrderByWithRelationInput
    | Prisma.BoostOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.BoostWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Boosts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Boosts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Boosts
   **/
  _count?: true | BoostCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: BoostAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: BoostSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: BoostMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: BoostMaxAggregateInputType;
};

export type GetBoostAggregateType<T extends BoostAggregateArgs> = {
  [P in keyof T & keyof AggregateBoost]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBoost[P]>
    : Prisma.GetScalarType<T[P], AggregateBoost[P]>;
};

export type BoostGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.BoostWhereInput;
  orderBy?:
    | Prisma.BoostOrderByWithAggregationInput
    | Prisma.BoostOrderByWithAggregationInput[];
  by: Prisma.BoostScalarFieldEnum[] | Prisma.BoostScalarFieldEnum;
  having?: Prisma.BoostScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: BoostCountAggregateInputType | true;
  _avg?: BoostAvgAggregateInputType;
  _sum?: BoostSumAggregateInputType;
  _min?: BoostMinAggregateInputType;
  _max?: BoostMaxAggregateInputType;
};

export type BoostGroupByOutputType = {
  id: bigint;
  wexel_id: bigint;
  token_mint: string;
  amount: bigint;
  value_usd: bigint;
  apy_boost_bp: number;
  price_usd: bigint;
  created_at: Date;
  _count: BoostCountAggregateOutputType | null;
  _avg: BoostAvgAggregateOutputType | null;
  _sum: BoostSumAggregateOutputType | null;
  _min: BoostMinAggregateOutputType | null;
  _max: BoostMaxAggregateOutputType | null;
};

type GetBoostGroupByPayload<T extends BoostGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BoostGroupByOutputType, T['by']> & {
      [P in keyof T & keyof BoostGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], BoostGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], BoostGroupByOutputType[P]>;
    }
  >
>;

export type BoostWhereInput = {
  AND?: Prisma.BoostWhereInput | Prisma.BoostWhereInput[];
  OR?: Prisma.BoostWhereInput[];
  NOT?: Prisma.BoostWhereInput | Prisma.BoostWhereInput[];
  id?: Prisma.BigIntFilter<'Boost'> | bigint | number;
  wexel_id?: Prisma.BigIntFilter<'Boost'> | bigint | number;
  token_mint?: Prisma.StringFilter<'Boost'> | string;
  amount?: Prisma.BigIntFilter<'Boost'> | bigint | number;
  value_usd?: Prisma.BigIntFilter<'Boost'> | bigint | number;
  apy_boost_bp?: Prisma.IntFilter<'Boost'> | number;
  price_usd?: Prisma.BigIntFilter<'Boost'> | bigint | number;
  created_at?: Prisma.DateTimeFilter<'Boost'> | Date | string;
  wexel?: Prisma.XOR<Prisma.WexelScalarRelationFilter, Prisma.WexelWhereInput>;
};

export type BoostOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  wexel_id?: Prisma.SortOrder;
  token_mint?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  value_usd?: Prisma.SortOrder;
  apy_boost_bp?: Prisma.SortOrder;
  price_usd?: Prisma.SortOrder;
  created_at?: Prisma.SortOrder;
  wexel?: Prisma.WexelOrderByWithRelationInput;
};

export type BoostWhereUniqueInput = Prisma.AtLeast<
  {
    id?: bigint | number;
    AND?: Prisma.BoostWhereInput | Prisma.BoostWhereInput[];
    OR?: Prisma.BoostWhereInput[];
    NOT?: Prisma.BoostWhereInput | Prisma.BoostWhereInput[];
    wexel_id?: Prisma.BigIntFilter<'Boost'> | bigint | number;
    token_mint?: Prisma.StringFilter<'Boost'> | string;
    amount?: Prisma.BigIntFilter<'Boost'> | bigint | number;
    value_usd?: Prisma.BigIntFilter<'Boost'> | bigint | number;
    apy_boost_bp?: Prisma.IntFilter<'Boost'> | number;
    price_usd?: Prisma.BigIntFilter<'Boost'> | bigint | number;
    created_at?: Prisma.DateTimeFilter<'Boost'> | Date | string;
    wexel?: Prisma.XOR<
      Prisma.WexelScalarRelationFilter,
      Prisma.WexelWhereInput
    >;
  },
  'id'
>;

export type BoostOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  wexel_id?: Prisma.SortOrder;
  token_mint?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  value_usd?: Prisma.SortOrder;
  apy_boost_bp?: Prisma.SortOrder;
  price_usd?: Prisma.SortOrder;
  created_at?: Prisma.SortOrder;
  _count?: Prisma.BoostCountOrderByAggregateInput;
  _avg?: Prisma.BoostAvgOrderByAggregateInput;
  _max?: Prisma.BoostMaxOrderByAggregateInput;
  _min?: Prisma.BoostMinOrderByAggregateInput;
  _sum?: Prisma.BoostSumOrderByAggregateInput;
};

export type BoostScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.BoostScalarWhereWithAggregatesInput
    | Prisma.BoostScalarWhereWithAggregatesInput[];
  OR?: Prisma.BoostScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.BoostScalarWhereWithAggregatesInput
    | Prisma.BoostScalarWhereWithAggregatesInput[];
  id?: Prisma.BigIntWithAggregatesFilter<'Boost'> | bigint | number;
  wexel_id?: Prisma.BigIntWithAggregatesFilter<'Boost'> | bigint | number;
  token_mint?: Prisma.StringWithAggregatesFilter<'Boost'> | string;
  amount?: Prisma.BigIntWithAggregatesFilter<'Boost'> | bigint | number;
  value_usd?: Prisma.BigIntWithAggregatesFilter<'Boost'> | bigint | number;
  apy_boost_bp?: Prisma.IntWithAggregatesFilter<'Boost'> | number;
  price_usd?: Prisma.BigIntWithAggregatesFilter<'Boost'> | bigint | number;
  created_at?: Prisma.DateTimeWithAggregatesFilter<'Boost'> | Date | string;
};

export type BoostCreateInput = {
  id?: bigint | number;
  token_mint: string;
  amount: bigint | number;
  value_usd: bigint | number;
  apy_boost_bp: number;
  price_usd: bigint | number;
  created_at?: Date | string;
  wexel: Prisma.WexelCreateNestedOneWithoutBoostsInput;
};

export type BoostUncheckedCreateInput = {
  id?: bigint | number;
  wexel_id: bigint | number;
  token_mint: string;
  amount: bigint | number;
  value_usd: bigint | number;
  apy_boost_bp: number;
  price_usd: bigint | number;
  created_at?: Date | string;
};

export type BoostUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  token_mint?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  value_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  apy_boost_bp?: Prisma.IntFieldUpdateOperationsInput | number;
  price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  wexel?: Prisma.WexelUpdateOneRequiredWithoutBoostsNestedInput;
};

export type BoostUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  wexel_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  token_mint?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  value_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  apy_boost_bp?: Prisma.IntFieldUpdateOperationsInput | number;
  price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BoostCreateManyInput = {
  id?: bigint | number;
  wexel_id: bigint | number;
  token_mint: string;
  amount: bigint | number;
  value_usd: bigint | number;
  apy_boost_bp: number;
  price_usd: bigint | number;
  created_at?: Date | string;
};

export type BoostUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  token_mint?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  value_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  apy_boost_bp?: Prisma.IntFieldUpdateOperationsInput | number;
  price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BoostUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  wexel_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  token_mint?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  value_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  apy_boost_bp?: Prisma.IntFieldUpdateOperationsInput | number;
  price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BoostListRelationFilter = {
  every?: Prisma.BoostWhereInput;
  some?: Prisma.BoostWhereInput;
  none?: Prisma.BoostWhereInput;
};

export type BoostOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type BoostCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  wexel_id?: Prisma.SortOrder;
  token_mint?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  value_usd?: Prisma.SortOrder;
  apy_boost_bp?: Prisma.SortOrder;
  price_usd?: Prisma.SortOrder;
  created_at?: Prisma.SortOrder;
};

export type BoostAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  wexel_id?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  value_usd?: Prisma.SortOrder;
  apy_boost_bp?: Prisma.SortOrder;
  price_usd?: Prisma.SortOrder;
};

export type BoostMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  wexel_id?: Prisma.SortOrder;
  token_mint?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  value_usd?: Prisma.SortOrder;
  apy_boost_bp?: Prisma.SortOrder;
  price_usd?: Prisma.SortOrder;
  created_at?: Prisma.SortOrder;
};

export type BoostMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  wexel_id?: Prisma.SortOrder;
  token_mint?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  value_usd?: Prisma.SortOrder;
  apy_boost_bp?: Prisma.SortOrder;
  price_usd?: Prisma.SortOrder;
  created_at?: Prisma.SortOrder;
};

export type BoostSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  wexel_id?: Prisma.SortOrder;
  amount?: Prisma.SortOrder;
  value_usd?: Prisma.SortOrder;
  apy_boost_bp?: Prisma.SortOrder;
  price_usd?: Prisma.SortOrder;
};

export type BoostCreateNestedManyWithoutWexelInput = {
  create?:
    | Prisma.XOR<
        Prisma.BoostCreateWithoutWexelInput,
        Prisma.BoostUncheckedCreateWithoutWexelInput
      >
    | Prisma.BoostCreateWithoutWexelInput[]
    | Prisma.BoostUncheckedCreateWithoutWexelInput[];
  connectOrCreate?:
    | Prisma.BoostCreateOrConnectWithoutWexelInput
    | Prisma.BoostCreateOrConnectWithoutWexelInput[];
  createMany?: Prisma.BoostCreateManyWexelInputEnvelope;
  connect?: Prisma.BoostWhereUniqueInput | Prisma.BoostWhereUniqueInput[];
};

export type BoostUncheckedCreateNestedManyWithoutWexelInput = {
  create?:
    | Prisma.XOR<
        Prisma.BoostCreateWithoutWexelInput,
        Prisma.BoostUncheckedCreateWithoutWexelInput
      >
    | Prisma.BoostCreateWithoutWexelInput[]
    | Prisma.BoostUncheckedCreateWithoutWexelInput[];
  connectOrCreate?:
    | Prisma.BoostCreateOrConnectWithoutWexelInput
    | Prisma.BoostCreateOrConnectWithoutWexelInput[];
  createMany?: Prisma.BoostCreateManyWexelInputEnvelope;
  connect?: Prisma.BoostWhereUniqueInput | Prisma.BoostWhereUniqueInput[];
};

export type BoostUpdateManyWithoutWexelNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.BoostCreateWithoutWexelInput,
        Prisma.BoostUncheckedCreateWithoutWexelInput
      >
    | Prisma.BoostCreateWithoutWexelInput[]
    | Prisma.BoostUncheckedCreateWithoutWexelInput[];
  connectOrCreate?:
    | Prisma.BoostCreateOrConnectWithoutWexelInput
    | Prisma.BoostCreateOrConnectWithoutWexelInput[];
  upsert?:
    | Prisma.BoostUpsertWithWhereUniqueWithoutWexelInput
    | Prisma.BoostUpsertWithWhereUniqueWithoutWexelInput[];
  createMany?: Prisma.BoostCreateManyWexelInputEnvelope;
  set?: Prisma.BoostWhereUniqueInput | Prisma.BoostWhereUniqueInput[];
  disconnect?: Prisma.BoostWhereUniqueInput | Prisma.BoostWhereUniqueInput[];
  delete?: Prisma.BoostWhereUniqueInput | Prisma.BoostWhereUniqueInput[];
  connect?: Prisma.BoostWhereUniqueInput | Prisma.BoostWhereUniqueInput[];
  update?:
    | Prisma.BoostUpdateWithWhereUniqueWithoutWexelInput
    | Prisma.BoostUpdateWithWhereUniqueWithoutWexelInput[];
  updateMany?:
    | Prisma.BoostUpdateManyWithWhereWithoutWexelInput
    | Prisma.BoostUpdateManyWithWhereWithoutWexelInput[];
  deleteMany?: Prisma.BoostScalarWhereInput | Prisma.BoostScalarWhereInput[];
};

export type BoostUncheckedUpdateManyWithoutWexelNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.BoostCreateWithoutWexelInput,
        Prisma.BoostUncheckedCreateWithoutWexelInput
      >
    | Prisma.BoostCreateWithoutWexelInput[]
    | Prisma.BoostUncheckedCreateWithoutWexelInput[];
  connectOrCreate?:
    | Prisma.BoostCreateOrConnectWithoutWexelInput
    | Prisma.BoostCreateOrConnectWithoutWexelInput[];
  upsert?:
    | Prisma.BoostUpsertWithWhereUniqueWithoutWexelInput
    | Prisma.BoostUpsertWithWhereUniqueWithoutWexelInput[];
  createMany?: Prisma.BoostCreateManyWexelInputEnvelope;
  set?: Prisma.BoostWhereUniqueInput | Prisma.BoostWhereUniqueInput[];
  disconnect?: Prisma.BoostWhereUniqueInput | Prisma.BoostWhereUniqueInput[];
  delete?: Prisma.BoostWhereUniqueInput | Prisma.BoostWhereUniqueInput[];
  connect?: Prisma.BoostWhereUniqueInput | Prisma.BoostWhereUniqueInput[];
  update?:
    | Prisma.BoostUpdateWithWhereUniqueWithoutWexelInput
    | Prisma.BoostUpdateWithWhereUniqueWithoutWexelInput[];
  updateMany?:
    | Prisma.BoostUpdateManyWithWhereWithoutWexelInput
    | Prisma.BoostUpdateManyWithWhereWithoutWexelInput[];
  deleteMany?: Prisma.BoostScalarWhereInput | Prisma.BoostScalarWhereInput[];
};

export type BoostCreateWithoutWexelInput = {
  id?: bigint | number;
  token_mint: string;
  amount: bigint | number;
  value_usd: bigint | number;
  apy_boost_bp: number;
  price_usd: bigint | number;
  created_at?: Date | string;
};

export type BoostUncheckedCreateWithoutWexelInput = {
  id?: bigint | number;
  token_mint: string;
  amount: bigint | number;
  value_usd: bigint | number;
  apy_boost_bp: number;
  price_usd: bigint | number;
  created_at?: Date | string;
};

export type BoostCreateOrConnectWithoutWexelInput = {
  where: Prisma.BoostWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.BoostCreateWithoutWexelInput,
    Prisma.BoostUncheckedCreateWithoutWexelInput
  >;
};

export type BoostCreateManyWexelInputEnvelope = {
  data: Prisma.BoostCreateManyWexelInput | Prisma.BoostCreateManyWexelInput[];
  skipDuplicates?: boolean;
};

export type BoostUpsertWithWhereUniqueWithoutWexelInput = {
  where: Prisma.BoostWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.BoostUpdateWithoutWexelInput,
    Prisma.BoostUncheckedUpdateWithoutWexelInput
  >;
  create: Prisma.XOR<
    Prisma.BoostCreateWithoutWexelInput,
    Prisma.BoostUncheckedCreateWithoutWexelInput
  >;
};

export type BoostUpdateWithWhereUniqueWithoutWexelInput = {
  where: Prisma.BoostWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.BoostUpdateWithoutWexelInput,
    Prisma.BoostUncheckedUpdateWithoutWexelInput
  >;
};

export type BoostUpdateManyWithWhereWithoutWexelInput = {
  where: Prisma.BoostScalarWhereInput;
  data: Prisma.XOR<
    Prisma.BoostUpdateManyMutationInput,
    Prisma.BoostUncheckedUpdateManyWithoutWexelInput
  >;
};

export type BoostScalarWhereInput = {
  AND?: Prisma.BoostScalarWhereInput | Prisma.BoostScalarWhereInput[];
  OR?: Prisma.BoostScalarWhereInput[];
  NOT?: Prisma.BoostScalarWhereInput | Prisma.BoostScalarWhereInput[];
  id?: Prisma.BigIntFilter<'Boost'> | bigint | number;
  wexel_id?: Prisma.BigIntFilter<'Boost'> | bigint | number;
  token_mint?: Prisma.StringFilter<'Boost'> | string;
  amount?: Prisma.BigIntFilter<'Boost'> | bigint | number;
  value_usd?: Prisma.BigIntFilter<'Boost'> | bigint | number;
  apy_boost_bp?: Prisma.IntFilter<'Boost'> | number;
  price_usd?: Prisma.BigIntFilter<'Boost'> | bigint | number;
  created_at?: Prisma.DateTimeFilter<'Boost'> | Date | string;
};

export type BoostCreateManyWexelInput = {
  id?: bigint | number;
  token_mint: string;
  amount: bigint | number;
  value_usd: bigint | number;
  apy_boost_bp: number;
  price_usd: bigint | number;
  created_at?: Date | string;
};

export type BoostUpdateWithoutWexelInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  token_mint?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  value_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  apy_boost_bp?: Prisma.IntFieldUpdateOperationsInput | number;
  price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BoostUncheckedUpdateWithoutWexelInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  token_mint?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  value_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  apy_boost_bp?: Prisma.IntFieldUpdateOperationsInput | number;
  price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BoostUncheckedUpdateManyWithoutWexelInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  token_mint?: Prisma.StringFieldUpdateOperationsInput | string;
  amount?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  value_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  apy_boost_bp?: Prisma.IntFieldUpdateOperationsInput | number;
  price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type BoostSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    wexel_id?: boolean;
    token_mint?: boolean;
    amount?: boolean;
    value_usd?: boolean;
    apy_boost_bp?: boolean;
    price_usd?: boolean;
    created_at?: boolean;
    wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['boost']
>;

export type BoostSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    wexel_id?: boolean;
    token_mint?: boolean;
    amount?: boolean;
    value_usd?: boolean;
    apy_boost_bp?: boolean;
    price_usd?: boolean;
    created_at?: boolean;
    wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['boost']
>;

export type BoostSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    wexel_id?: boolean;
    token_mint?: boolean;
    amount?: boolean;
    value_usd?: boolean;
    apy_boost_bp?: boolean;
    price_usd?: boolean;
    created_at?: boolean;
    wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['boost']
>;

export type BoostSelectScalar = {
  id?: boolean;
  wexel_id?: boolean;
  token_mint?: boolean;
  amount?: boolean;
  value_usd?: boolean;
  apy_boost_bp?: boolean;
  price_usd?: boolean;
  created_at?: boolean;
};

export type BoostOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'wexel_id'
  | 'token_mint'
  | 'amount'
  | 'value_usd'
  | 'apy_boost_bp'
  | 'price_usd'
  | 'created_at',
  ExtArgs['result']['boost']
>;
export type BoostInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>;
};
export type BoostIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>;
};
export type BoostIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>;
};

export type $BoostPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Boost';
  objects: {
    wexel: Prisma.$WexelPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: bigint;
      wexel_id: bigint;
      token_mint: string;
      amount: bigint;
      value_usd: bigint;
      apy_boost_bp: number;
      price_usd: bigint;
      created_at: Date;
    },
    ExtArgs['result']['boost']
  >;
  composites: {};
};

export type BoostGetPayload<
  S extends boolean | null | undefined | BoostDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$BoostPayload, S>;

export type BoostCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<BoostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: BoostCountAggregateInputType | true;
};

export interface BoostDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Boost'];
    meta: { name: 'Boost' };
  };
  /**
   * Find zero or one Boost that matches the filter.
   * @param {BoostFindUniqueArgs} args - Arguments to find a Boost
   * @example
   * // Get one Boost
   * const boost = await prisma.boost.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BoostFindUniqueArgs>(
    args: Prisma.SelectSubset<T, BoostFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__BoostClient<
    runtime.Types.Result.GetResult<
      Prisma.$BoostPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Boost that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BoostFindUniqueOrThrowArgs} args - Arguments to find a Boost
   * @example
   * // Get one Boost
   * const boost = await prisma.boost.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BoostFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, BoostFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__BoostClient<
    runtime.Types.Result.GetResult<
      Prisma.$BoostPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Boost that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BoostFindFirstArgs} args - Arguments to find a Boost
   * @example
   * // Get one Boost
   * const boost = await prisma.boost.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BoostFindFirstArgs>(
    args?: Prisma.SelectSubset<T, BoostFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__BoostClient<
    runtime.Types.Result.GetResult<
      Prisma.$BoostPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Boost that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BoostFindFirstOrThrowArgs} args - Arguments to find a Boost
   * @example
   * // Get one Boost
   * const boost = await prisma.boost.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BoostFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, BoostFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__BoostClient<
    runtime.Types.Result.GetResult<
      Prisma.$BoostPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Boosts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BoostFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Boosts
   * const boosts = await prisma.boost.findMany()
   *
   * // Get first 10 Boosts
   * const boosts = await prisma.boost.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const boostWithIdOnly = await prisma.boost.findMany({ select: { id: true } })
   *
   */
  findMany<T extends BoostFindManyArgs>(
    args?: Prisma.SelectSubset<T, BoostFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BoostPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Boost.
   * @param {BoostCreateArgs} args - Arguments to create a Boost.
   * @example
   * // Create one Boost
   * const Boost = await prisma.boost.create({
   *   data: {
   *     // ... data to create a Boost
   *   }
   * })
   *
   */
  create<T extends BoostCreateArgs>(
    args: Prisma.SelectSubset<T, BoostCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__BoostClient<
    runtime.Types.Result.GetResult<
      Prisma.$BoostPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Boosts.
   * @param {BoostCreateManyArgs} args - Arguments to create many Boosts.
   * @example
   * // Create many Boosts
   * const boost = await prisma.boost.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends BoostCreateManyArgs>(
    args?: Prisma.SelectSubset<T, BoostCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Boosts and returns the data saved in the database.
   * @param {BoostCreateManyAndReturnArgs} args - Arguments to create many Boosts.
   * @example
   * // Create many Boosts
   * const boost = await prisma.boost.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Boosts and only return the `id`
   * const boostWithIdOnly = await prisma.boost.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends BoostCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, BoostCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BoostPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Boost.
   * @param {BoostDeleteArgs} args - Arguments to delete one Boost.
   * @example
   * // Delete one Boost
   * const Boost = await prisma.boost.delete({
   *   where: {
   *     // ... filter to delete one Boost
   *   }
   * })
   *
   */
  delete<T extends BoostDeleteArgs>(
    args: Prisma.SelectSubset<T, BoostDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__BoostClient<
    runtime.Types.Result.GetResult<
      Prisma.$BoostPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Boost.
   * @param {BoostUpdateArgs} args - Arguments to update one Boost.
   * @example
   * // Update one Boost
   * const boost = await prisma.boost.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends BoostUpdateArgs>(
    args: Prisma.SelectSubset<T, BoostUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__BoostClient<
    runtime.Types.Result.GetResult<
      Prisma.$BoostPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Boosts.
   * @param {BoostDeleteManyArgs} args - Arguments to filter Boosts to delete.
   * @example
   * // Delete a few Boosts
   * const { count } = await prisma.boost.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends BoostDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, BoostDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Boosts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BoostUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Boosts
   * const boost = await prisma.boost.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends BoostUpdateManyArgs>(
    args: Prisma.SelectSubset<T, BoostUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Boosts and returns the data updated in the database.
   * @param {BoostUpdateManyAndReturnArgs} args - Arguments to update many Boosts.
   * @example
   * // Update many Boosts
   * const boost = await prisma.boost.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Boosts and only return the `id`
   * const boostWithIdOnly = await prisma.boost.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends BoostUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, BoostUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$BoostPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Boost.
   * @param {BoostUpsertArgs} args - Arguments to update or create a Boost.
   * @example
   * // Update or create a Boost
   * const boost = await prisma.boost.upsert({
   *   create: {
   *     // ... data to create a Boost
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Boost we want to update
   *   }
   * })
   */
  upsert<T extends BoostUpsertArgs>(
    args: Prisma.SelectSubset<T, BoostUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__BoostClient<
    runtime.Types.Result.GetResult<
      Prisma.$BoostPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Boosts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BoostCountArgs} args - Arguments to filter Boosts to count.
   * @example
   * // Count the number of Boosts
   * const count = await prisma.boost.count({
   *   where: {
   *     // ... the filter for the Boosts we want to count
   *   }
   * })
   **/
  count<T extends BoostCountArgs>(
    args?: Prisma.Subset<T, BoostCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BoostCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Boost.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BoostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends BoostAggregateArgs>(
    args: Prisma.Subset<T, BoostAggregateArgs>,
  ): Prisma.PrismaPromise<GetBoostAggregateType<T>>;

  /**
   * Group by Boost.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BoostGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends BoostGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BoostGroupByArgs['orderBy'] }
      : { orderBy?: BoostGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, BoostGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetBoostGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Boost model
   */
  readonly fields: BoostFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Boost.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BoostClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  wexel<T extends Prisma.WexelDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.WexelDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__WexelClient<
    | runtime.Types.Result.GetResult<
        Prisma.$WexelPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Boost model
 */
export interface BoostFieldRefs {
  readonly id: Prisma.FieldRef<'Boost', 'BigInt'>;
  readonly wexel_id: Prisma.FieldRef<'Boost', 'BigInt'>;
  readonly token_mint: Prisma.FieldRef<'Boost', 'String'>;
  readonly amount: Prisma.FieldRef<'Boost', 'BigInt'>;
  readonly value_usd: Prisma.FieldRef<'Boost', 'BigInt'>;
  readonly apy_boost_bp: Prisma.FieldRef<'Boost', 'Int'>;
  readonly price_usd: Prisma.FieldRef<'Boost', 'BigInt'>;
  readonly created_at: Prisma.FieldRef<'Boost', 'DateTime'>;
}

// Custom InputTypes
/**
 * Boost findUnique
 */
export type BoostFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Boost
   */
  select?: Prisma.BoostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Boost
   */
  omit?: Prisma.BoostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BoostInclude<ExtArgs> | null;
  /**
   * Filter, which Boost to fetch.
   */
  where: Prisma.BoostWhereUniqueInput;
};

/**
 * Boost findUniqueOrThrow
 */
export type BoostFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Boost
   */
  select?: Prisma.BoostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Boost
   */
  omit?: Prisma.BoostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BoostInclude<ExtArgs> | null;
  /**
   * Filter, which Boost to fetch.
   */
  where: Prisma.BoostWhereUniqueInput;
};

/**
 * Boost findFirst
 */
export type BoostFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Boost
   */
  select?: Prisma.BoostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Boost
   */
  omit?: Prisma.BoostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BoostInclude<ExtArgs> | null;
  /**
   * Filter, which Boost to fetch.
   */
  where?: Prisma.BoostWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Boosts to fetch.
   */
  orderBy?:
    | Prisma.BoostOrderByWithRelationInput
    | Prisma.BoostOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Boosts.
   */
  cursor?: Prisma.BoostWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Boosts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Boosts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Boosts.
   */
  distinct?: Prisma.BoostScalarFieldEnum | Prisma.BoostScalarFieldEnum[];
};

/**
 * Boost findFirstOrThrow
 */
export type BoostFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Boost
   */
  select?: Prisma.BoostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Boost
   */
  omit?: Prisma.BoostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BoostInclude<ExtArgs> | null;
  /**
   * Filter, which Boost to fetch.
   */
  where?: Prisma.BoostWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Boosts to fetch.
   */
  orderBy?:
    | Prisma.BoostOrderByWithRelationInput
    | Prisma.BoostOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Boosts.
   */
  cursor?: Prisma.BoostWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Boosts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Boosts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Boosts.
   */
  distinct?: Prisma.BoostScalarFieldEnum | Prisma.BoostScalarFieldEnum[];
};

/**
 * Boost findMany
 */
export type BoostFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Boost
   */
  select?: Prisma.BoostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Boost
   */
  omit?: Prisma.BoostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BoostInclude<ExtArgs> | null;
  /**
   * Filter, which Boosts to fetch.
   */
  where?: Prisma.BoostWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Boosts to fetch.
   */
  orderBy?:
    | Prisma.BoostOrderByWithRelationInput
    | Prisma.BoostOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Boosts.
   */
  cursor?: Prisma.BoostWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Boosts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Boosts.
   */
  skip?: number;
  distinct?: Prisma.BoostScalarFieldEnum | Prisma.BoostScalarFieldEnum[];
};

/**
 * Boost create
 */
export type BoostCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Boost
   */
  select?: Prisma.BoostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Boost
   */
  omit?: Prisma.BoostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BoostInclude<ExtArgs> | null;
  /**
   * The data needed to create a Boost.
   */
  data: Prisma.XOR<Prisma.BoostCreateInput, Prisma.BoostUncheckedCreateInput>;
};

/**
 * Boost createMany
 */
export type BoostCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Boosts.
   */
  data: Prisma.BoostCreateManyInput | Prisma.BoostCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Boost createManyAndReturn
 */
export type BoostCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Boost
   */
  select?: Prisma.BoostSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Boost
   */
  omit?: Prisma.BoostOmit<ExtArgs> | null;
  /**
   * The data used to create many Boosts.
   */
  data: Prisma.BoostCreateManyInput | Prisma.BoostCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BoostIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Boost update
 */
export type BoostUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Boost
   */
  select?: Prisma.BoostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Boost
   */
  omit?: Prisma.BoostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BoostInclude<ExtArgs> | null;
  /**
   * The data needed to update a Boost.
   */
  data: Prisma.XOR<Prisma.BoostUpdateInput, Prisma.BoostUncheckedUpdateInput>;
  /**
   * Choose, which Boost to update.
   */
  where: Prisma.BoostWhereUniqueInput;
};

/**
 * Boost updateMany
 */
export type BoostUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Boosts.
   */
  data: Prisma.XOR<
    Prisma.BoostUpdateManyMutationInput,
    Prisma.BoostUncheckedUpdateManyInput
  >;
  /**
   * Filter which Boosts to update
   */
  where?: Prisma.BoostWhereInput;
  /**
   * Limit how many Boosts to update.
   */
  limit?: number;
};

/**
 * Boost updateManyAndReturn
 */
export type BoostUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Boost
   */
  select?: Prisma.BoostSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Boost
   */
  omit?: Prisma.BoostOmit<ExtArgs> | null;
  /**
   * The data used to update Boosts.
   */
  data: Prisma.XOR<
    Prisma.BoostUpdateManyMutationInput,
    Prisma.BoostUncheckedUpdateManyInput
  >;
  /**
   * Filter which Boosts to update
   */
  where?: Prisma.BoostWhereInput;
  /**
   * Limit how many Boosts to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BoostIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Boost upsert
 */
export type BoostUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Boost
   */
  select?: Prisma.BoostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Boost
   */
  omit?: Prisma.BoostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BoostInclude<ExtArgs> | null;
  /**
   * The filter to search for the Boost to update in case it exists.
   */
  where: Prisma.BoostWhereUniqueInput;
  /**
   * In case the Boost found by the `where` argument doesn't exist, create a new Boost with this data.
   */
  create: Prisma.XOR<Prisma.BoostCreateInput, Prisma.BoostUncheckedCreateInput>;
  /**
   * In case the Boost was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BoostUpdateInput, Prisma.BoostUncheckedUpdateInput>;
};

/**
 * Boost delete
 */
export type BoostDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Boost
   */
  select?: Prisma.BoostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Boost
   */
  omit?: Prisma.BoostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BoostInclude<ExtArgs> | null;
  /**
   * Filter which Boost to delete.
   */
  where: Prisma.BoostWhereUniqueInput;
};

/**
 * Boost deleteMany
 */
export type BoostDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Boosts to delete
   */
  where?: Prisma.BoostWhereInput;
  /**
   * Limit how many Boosts to delete.
   */
  limit?: number;
};

/**
 * Boost without action
 */
export type BoostDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Boost
   */
  select?: Prisma.BoostSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Boost
   */
  omit?: Prisma.BoostOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BoostInclude<ExtArgs> | null;
};
