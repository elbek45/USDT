
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Listing` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Listing
 * 
 */
export type ListingModel = runtime.Types.Result.DefaultSelection<Prisma.$ListingPayload>

export type AggregateListing = {
  _count: ListingCountAggregateOutputType | null
  _avg: ListingAvgAggregateOutputType | null
  _sum: ListingSumAggregateOutputType | null
  _min: ListingMinAggregateOutputType | null
  _max: ListingMaxAggregateOutputType | null
}

export type ListingAvgAggregateOutputType = {
  id: number | null
  wexel_id: number | null
  ask_price_usd: number | null
  min_bid_usd: number | null
}

export type ListingSumAggregateOutputType = {
  id: bigint | null
  wexel_id: bigint | null
  ask_price_usd: bigint | null
  min_bid_usd: bigint | null
}

export type ListingMinAggregateOutputType = {
  id: bigint | null
  wexel_id: bigint | null
  ask_price_usd: bigint | null
  auction: boolean | null
  min_bid_usd: bigint | null
  expiry_ts: Date | null
  status: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type ListingMaxAggregateOutputType = {
  id: bigint | null
  wexel_id: bigint | null
  ask_price_usd: bigint | null
  auction: boolean | null
  min_bid_usd: bigint | null
  expiry_ts: Date | null
  status: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type ListingCountAggregateOutputType = {
  id: number
  wexel_id: number
  ask_price_usd: number
  auction: number
  min_bid_usd: number
  expiry_ts: number
  status: number
  created_at: number
  updated_at: number
  _all: number
}


export type ListingAvgAggregateInputType = {
  id?: true
  wexel_id?: true
  ask_price_usd?: true
  min_bid_usd?: true
}

export type ListingSumAggregateInputType = {
  id?: true
  wexel_id?: true
  ask_price_usd?: true
  min_bid_usd?: true
}

export type ListingMinAggregateInputType = {
  id?: true
  wexel_id?: true
  ask_price_usd?: true
  auction?: true
  min_bid_usd?: true
  expiry_ts?: true
  status?: true
  created_at?: true
  updated_at?: true
}

export type ListingMaxAggregateInputType = {
  id?: true
  wexel_id?: true
  ask_price_usd?: true
  auction?: true
  min_bid_usd?: true
  expiry_ts?: true
  status?: true
  created_at?: true
  updated_at?: true
}

export type ListingCountAggregateInputType = {
  id?: true
  wexel_id?: true
  ask_price_usd?: true
  auction?: true
  min_bid_usd?: true
  expiry_ts?: true
  status?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type ListingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Listing to aggregate.
   */
  where?: Prisma.ListingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Listings to fetch.
   */
  orderBy?: Prisma.ListingOrderByWithRelationInput | Prisma.ListingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ListingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Listings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Listings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Listings
  **/
  _count?: true | ListingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ListingAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ListingSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ListingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ListingMaxAggregateInputType
}

export type GetListingAggregateType<T extends ListingAggregateArgs> = {
      [P in keyof T & keyof AggregateListing]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateListing[P]>
    : Prisma.GetScalarType<T[P], AggregateListing[P]>
}




export type ListingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ListingWhereInput
  orderBy?: Prisma.ListingOrderByWithAggregationInput | Prisma.ListingOrderByWithAggregationInput[]
  by: Prisma.ListingScalarFieldEnum[] | Prisma.ListingScalarFieldEnum
  having?: Prisma.ListingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ListingCountAggregateInputType | true
  _avg?: ListingAvgAggregateInputType
  _sum?: ListingSumAggregateInputType
  _min?: ListingMinAggregateInputType
  _max?: ListingMaxAggregateInputType
}

export type ListingGroupByOutputType = {
  id: bigint
  wexel_id: bigint
  ask_price_usd: bigint
  auction: boolean
  min_bid_usd: bigint | null
  expiry_ts: Date | null
  status: string
  created_at: Date
  updated_at: Date
  _count: ListingCountAggregateOutputType | null
  _avg: ListingAvgAggregateOutputType | null
  _sum: ListingSumAggregateOutputType | null
  _min: ListingMinAggregateOutputType | null
  _max: ListingMaxAggregateOutputType | null
}

type GetListingGroupByPayload<T extends ListingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ListingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ListingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ListingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ListingGroupByOutputType[P]>
      }
    >
  >



export type ListingWhereInput = {
  AND?: Prisma.ListingWhereInput | Prisma.ListingWhereInput[]
  OR?: Prisma.ListingWhereInput[]
  NOT?: Prisma.ListingWhereInput | Prisma.ListingWhereInput[]
  id?: Prisma.BigIntFilter<"Listing"> | bigint | number
  wexel_id?: Prisma.BigIntFilter<"Listing"> | bigint | number
  ask_price_usd?: Prisma.BigIntFilter<"Listing"> | bigint | number
  auction?: Prisma.BoolFilter<"Listing"> | boolean
  min_bid_usd?: Prisma.BigIntNullableFilter<"Listing"> | bigint | number | null
  expiry_ts?: Prisma.DateTimeNullableFilter<"Listing"> | Date | string | null
  status?: Prisma.StringFilter<"Listing"> | string
  created_at?: Prisma.DateTimeFilter<"Listing"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Listing"> | Date | string
  wexel?: Prisma.XOR<Prisma.WexelScalarRelationFilter, Prisma.WexelWhereInput>
}

export type ListingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  wexel_id?: Prisma.SortOrder
  ask_price_usd?: Prisma.SortOrder
  auction?: Prisma.SortOrder
  min_bid_usd?: Prisma.SortOrderInput | Prisma.SortOrder
  expiry_ts?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  wexel?: Prisma.WexelOrderByWithRelationInput
}

export type ListingWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.ListingWhereInput | Prisma.ListingWhereInput[]
  OR?: Prisma.ListingWhereInput[]
  NOT?: Prisma.ListingWhereInput | Prisma.ListingWhereInput[]
  wexel_id?: Prisma.BigIntFilter<"Listing"> | bigint | number
  ask_price_usd?: Prisma.BigIntFilter<"Listing"> | bigint | number
  auction?: Prisma.BoolFilter<"Listing"> | boolean
  min_bid_usd?: Prisma.BigIntNullableFilter<"Listing"> | bigint | number | null
  expiry_ts?: Prisma.DateTimeNullableFilter<"Listing"> | Date | string | null
  status?: Prisma.StringFilter<"Listing"> | string
  created_at?: Prisma.DateTimeFilter<"Listing"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Listing"> | Date | string
  wexel?: Prisma.XOR<Prisma.WexelScalarRelationFilter, Prisma.WexelWhereInput>
}, "id">

export type ListingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  wexel_id?: Prisma.SortOrder
  ask_price_usd?: Prisma.SortOrder
  auction?: Prisma.SortOrder
  min_bid_usd?: Prisma.SortOrderInput | Prisma.SortOrder
  expiry_ts?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  _count?: Prisma.ListingCountOrderByAggregateInput
  _avg?: Prisma.ListingAvgOrderByAggregateInput
  _max?: Prisma.ListingMaxOrderByAggregateInput
  _min?: Prisma.ListingMinOrderByAggregateInput
  _sum?: Prisma.ListingSumOrderByAggregateInput
}

export type ListingScalarWhereWithAggregatesInput = {
  AND?: Prisma.ListingScalarWhereWithAggregatesInput | Prisma.ListingScalarWhereWithAggregatesInput[]
  OR?: Prisma.ListingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ListingScalarWhereWithAggregatesInput | Prisma.ListingScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"Listing"> | bigint | number
  wexel_id?: Prisma.BigIntWithAggregatesFilter<"Listing"> | bigint | number
  ask_price_usd?: Prisma.BigIntWithAggregatesFilter<"Listing"> | bigint | number
  auction?: Prisma.BoolWithAggregatesFilter<"Listing"> | boolean
  min_bid_usd?: Prisma.BigIntNullableWithAggregatesFilter<"Listing"> | bigint | number | null
  expiry_ts?: Prisma.DateTimeNullableWithAggregatesFilter<"Listing"> | Date | string | null
  status?: Prisma.StringWithAggregatesFilter<"Listing"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"Listing"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"Listing"> | Date | string
}

export type ListingCreateInput = {
  id?: bigint | number
  ask_price_usd: bigint | number
  auction?: boolean
  min_bid_usd?: bigint | number | null
  expiry_ts?: Date | string | null
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
  wexel: Prisma.WexelCreateNestedOneWithoutListingsInput
}

export type ListingUncheckedCreateInput = {
  id?: bigint | number
  wexel_id: bigint | number
  ask_price_usd: bigint | number
  auction?: boolean
  min_bid_usd?: bigint | number | null
  expiry_ts?: Date | string | null
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ListingUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  ask_price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  auction?: Prisma.BoolFieldUpdateOperationsInput | boolean
  min_bid_usd?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  expiry_ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  wexel?: Prisma.WexelUpdateOneRequiredWithoutListingsNestedInput
}

export type ListingUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  wexel_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  ask_price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  auction?: Prisma.BoolFieldUpdateOperationsInput | boolean
  min_bid_usd?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  expiry_ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ListingCreateManyInput = {
  id?: bigint | number
  wexel_id: bigint | number
  ask_price_usd: bigint | number
  auction?: boolean
  min_bid_usd?: bigint | number | null
  expiry_ts?: Date | string | null
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ListingUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  ask_price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  auction?: Prisma.BoolFieldUpdateOperationsInput | boolean
  min_bid_usd?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  expiry_ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ListingUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  wexel_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  ask_price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  auction?: Prisma.BoolFieldUpdateOperationsInput | boolean
  min_bid_usd?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  expiry_ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ListingListRelationFilter = {
  every?: Prisma.ListingWhereInput
  some?: Prisma.ListingWhereInput
  none?: Prisma.ListingWhereInput
}

export type ListingOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ListingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  wexel_id?: Prisma.SortOrder
  ask_price_usd?: Prisma.SortOrder
  auction?: Prisma.SortOrder
  min_bid_usd?: Prisma.SortOrder
  expiry_ts?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ListingAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  wexel_id?: Prisma.SortOrder
  ask_price_usd?: Prisma.SortOrder
  min_bid_usd?: Prisma.SortOrder
}

export type ListingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  wexel_id?: Prisma.SortOrder
  ask_price_usd?: Prisma.SortOrder
  auction?: Prisma.SortOrder
  min_bid_usd?: Prisma.SortOrder
  expiry_ts?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ListingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  wexel_id?: Prisma.SortOrder
  ask_price_usd?: Prisma.SortOrder
  auction?: Prisma.SortOrder
  min_bid_usd?: Prisma.SortOrder
  expiry_ts?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ListingSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  wexel_id?: Prisma.SortOrder
  ask_price_usd?: Prisma.SortOrder
  min_bid_usd?: Prisma.SortOrder
}

export type ListingCreateNestedManyWithoutWexelInput = {
  create?: Prisma.XOR<Prisma.ListingCreateWithoutWexelInput, Prisma.ListingUncheckedCreateWithoutWexelInput> | Prisma.ListingCreateWithoutWexelInput[] | Prisma.ListingUncheckedCreateWithoutWexelInput[]
  connectOrCreate?: Prisma.ListingCreateOrConnectWithoutWexelInput | Prisma.ListingCreateOrConnectWithoutWexelInput[]
  createMany?: Prisma.ListingCreateManyWexelInputEnvelope
  connect?: Prisma.ListingWhereUniqueInput | Prisma.ListingWhereUniqueInput[]
}

export type ListingUncheckedCreateNestedManyWithoutWexelInput = {
  create?: Prisma.XOR<Prisma.ListingCreateWithoutWexelInput, Prisma.ListingUncheckedCreateWithoutWexelInput> | Prisma.ListingCreateWithoutWexelInput[] | Prisma.ListingUncheckedCreateWithoutWexelInput[]
  connectOrCreate?: Prisma.ListingCreateOrConnectWithoutWexelInput | Prisma.ListingCreateOrConnectWithoutWexelInput[]
  createMany?: Prisma.ListingCreateManyWexelInputEnvelope
  connect?: Prisma.ListingWhereUniqueInput | Prisma.ListingWhereUniqueInput[]
}

export type ListingUpdateManyWithoutWexelNestedInput = {
  create?: Prisma.XOR<Prisma.ListingCreateWithoutWexelInput, Prisma.ListingUncheckedCreateWithoutWexelInput> | Prisma.ListingCreateWithoutWexelInput[] | Prisma.ListingUncheckedCreateWithoutWexelInput[]
  connectOrCreate?: Prisma.ListingCreateOrConnectWithoutWexelInput | Prisma.ListingCreateOrConnectWithoutWexelInput[]
  upsert?: Prisma.ListingUpsertWithWhereUniqueWithoutWexelInput | Prisma.ListingUpsertWithWhereUniqueWithoutWexelInput[]
  createMany?: Prisma.ListingCreateManyWexelInputEnvelope
  set?: Prisma.ListingWhereUniqueInput | Prisma.ListingWhereUniqueInput[]
  disconnect?: Prisma.ListingWhereUniqueInput | Prisma.ListingWhereUniqueInput[]
  delete?: Prisma.ListingWhereUniqueInput | Prisma.ListingWhereUniqueInput[]
  connect?: Prisma.ListingWhereUniqueInput | Prisma.ListingWhereUniqueInput[]
  update?: Prisma.ListingUpdateWithWhereUniqueWithoutWexelInput | Prisma.ListingUpdateWithWhereUniqueWithoutWexelInput[]
  updateMany?: Prisma.ListingUpdateManyWithWhereWithoutWexelInput | Prisma.ListingUpdateManyWithWhereWithoutWexelInput[]
  deleteMany?: Prisma.ListingScalarWhereInput | Prisma.ListingScalarWhereInput[]
}

export type ListingUncheckedUpdateManyWithoutWexelNestedInput = {
  create?: Prisma.XOR<Prisma.ListingCreateWithoutWexelInput, Prisma.ListingUncheckedCreateWithoutWexelInput> | Prisma.ListingCreateWithoutWexelInput[] | Prisma.ListingUncheckedCreateWithoutWexelInput[]
  connectOrCreate?: Prisma.ListingCreateOrConnectWithoutWexelInput | Prisma.ListingCreateOrConnectWithoutWexelInput[]
  upsert?: Prisma.ListingUpsertWithWhereUniqueWithoutWexelInput | Prisma.ListingUpsertWithWhereUniqueWithoutWexelInput[]
  createMany?: Prisma.ListingCreateManyWexelInputEnvelope
  set?: Prisma.ListingWhereUniqueInput | Prisma.ListingWhereUniqueInput[]
  disconnect?: Prisma.ListingWhereUniqueInput | Prisma.ListingWhereUniqueInput[]
  delete?: Prisma.ListingWhereUniqueInput | Prisma.ListingWhereUniqueInput[]
  connect?: Prisma.ListingWhereUniqueInput | Prisma.ListingWhereUniqueInput[]
  update?: Prisma.ListingUpdateWithWhereUniqueWithoutWexelInput | Prisma.ListingUpdateWithWhereUniqueWithoutWexelInput[]
  updateMany?: Prisma.ListingUpdateManyWithWhereWithoutWexelInput | Prisma.ListingUpdateManyWithWhereWithoutWexelInput[]
  deleteMany?: Prisma.ListingScalarWhereInput | Prisma.ListingScalarWhereInput[]
}

export type NullableBigIntFieldUpdateOperationsInput = {
  set?: bigint | number | null
  increment?: bigint | number
  decrement?: bigint | number
  multiply?: bigint | number
  divide?: bigint | number
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type ListingCreateWithoutWexelInput = {
  id?: bigint | number
  ask_price_usd: bigint | number
  auction?: boolean
  min_bid_usd?: bigint | number | null
  expiry_ts?: Date | string | null
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ListingUncheckedCreateWithoutWexelInput = {
  id?: bigint | number
  ask_price_usd: bigint | number
  auction?: boolean
  min_bid_usd?: bigint | number | null
  expiry_ts?: Date | string | null
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ListingCreateOrConnectWithoutWexelInput = {
  where: Prisma.ListingWhereUniqueInput
  create: Prisma.XOR<Prisma.ListingCreateWithoutWexelInput, Prisma.ListingUncheckedCreateWithoutWexelInput>
}

export type ListingCreateManyWexelInputEnvelope = {
  data: Prisma.ListingCreateManyWexelInput | Prisma.ListingCreateManyWexelInput[]
  skipDuplicates?: boolean
}

export type ListingUpsertWithWhereUniqueWithoutWexelInput = {
  where: Prisma.ListingWhereUniqueInput
  update: Prisma.XOR<Prisma.ListingUpdateWithoutWexelInput, Prisma.ListingUncheckedUpdateWithoutWexelInput>
  create: Prisma.XOR<Prisma.ListingCreateWithoutWexelInput, Prisma.ListingUncheckedCreateWithoutWexelInput>
}

export type ListingUpdateWithWhereUniqueWithoutWexelInput = {
  where: Prisma.ListingWhereUniqueInput
  data: Prisma.XOR<Prisma.ListingUpdateWithoutWexelInput, Prisma.ListingUncheckedUpdateWithoutWexelInput>
}

export type ListingUpdateManyWithWhereWithoutWexelInput = {
  where: Prisma.ListingScalarWhereInput
  data: Prisma.XOR<Prisma.ListingUpdateManyMutationInput, Prisma.ListingUncheckedUpdateManyWithoutWexelInput>
}

export type ListingScalarWhereInput = {
  AND?: Prisma.ListingScalarWhereInput | Prisma.ListingScalarWhereInput[]
  OR?: Prisma.ListingScalarWhereInput[]
  NOT?: Prisma.ListingScalarWhereInput | Prisma.ListingScalarWhereInput[]
  id?: Prisma.BigIntFilter<"Listing"> | bigint | number
  wexel_id?: Prisma.BigIntFilter<"Listing"> | bigint | number
  ask_price_usd?: Prisma.BigIntFilter<"Listing"> | bigint | number
  auction?: Prisma.BoolFilter<"Listing"> | boolean
  min_bid_usd?: Prisma.BigIntNullableFilter<"Listing"> | bigint | number | null
  expiry_ts?: Prisma.DateTimeNullableFilter<"Listing"> | Date | string | null
  status?: Prisma.StringFilter<"Listing"> | string
  created_at?: Prisma.DateTimeFilter<"Listing"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Listing"> | Date | string
}

export type ListingCreateManyWexelInput = {
  id?: bigint | number
  ask_price_usd: bigint | number
  auction?: boolean
  min_bid_usd?: bigint | number | null
  expiry_ts?: Date | string | null
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ListingUpdateWithoutWexelInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  ask_price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  auction?: Prisma.BoolFieldUpdateOperationsInput | boolean
  min_bid_usd?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  expiry_ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ListingUncheckedUpdateWithoutWexelInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  ask_price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  auction?: Prisma.BoolFieldUpdateOperationsInput | boolean
  min_bid_usd?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  expiry_ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ListingUncheckedUpdateManyWithoutWexelInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  ask_price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  auction?: Prisma.BoolFieldUpdateOperationsInput | boolean
  min_bid_usd?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  expiry_ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ListingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  wexel_id?: boolean
  ask_price_usd?: boolean
  auction?: boolean
  min_bid_usd?: boolean
  expiry_ts?: boolean
  status?: boolean
  created_at?: boolean
  updated_at?: boolean
  wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>
}, ExtArgs["result"]["listing"]>

export type ListingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  wexel_id?: boolean
  ask_price_usd?: boolean
  auction?: boolean
  min_bid_usd?: boolean
  expiry_ts?: boolean
  status?: boolean
  created_at?: boolean
  updated_at?: boolean
  wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>
}, ExtArgs["result"]["listing"]>

export type ListingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  wexel_id?: boolean
  ask_price_usd?: boolean
  auction?: boolean
  min_bid_usd?: boolean
  expiry_ts?: boolean
  status?: boolean
  created_at?: boolean
  updated_at?: boolean
  wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>
}, ExtArgs["result"]["listing"]>

export type ListingSelectScalar = {
  id?: boolean
  wexel_id?: boolean
  ask_price_usd?: boolean
  auction?: boolean
  min_bid_usd?: boolean
  expiry_ts?: boolean
  status?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type ListingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "wexel_id" | "ask_price_usd" | "auction" | "min_bid_usd" | "expiry_ts" | "status" | "created_at" | "updated_at", ExtArgs["result"]["listing"]>
export type ListingInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>
}
export type ListingIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>
}
export type ListingIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  wexel?: boolean | Prisma.WexelDefaultArgs<ExtArgs>
}

export type $ListingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Listing"
  objects: {
    wexel: Prisma.$WexelPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    wexel_id: bigint
    ask_price_usd: bigint
    auction: boolean
    min_bid_usd: bigint | null
    expiry_ts: Date | null
    status: string
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["listing"]>
  composites: {}
}

export type ListingGetPayload<S extends boolean | null | undefined | ListingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ListingPayload, S>

export type ListingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ListingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ListingCountAggregateInputType | true
  }

export interface ListingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Listing'], meta: { name: 'Listing' } }
  /**
   * Find zero or one Listing that matches the filter.
   * @param {ListingFindUniqueArgs} args - Arguments to find a Listing
   * @example
   * // Get one Listing
   * const listing = await prisma.listing.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ListingFindUniqueArgs>(args: Prisma.SelectSubset<T, ListingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ListingClient<runtime.Types.Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Listing that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ListingFindUniqueOrThrowArgs} args - Arguments to find a Listing
   * @example
   * // Get one Listing
   * const listing = await prisma.listing.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ListingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ListingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ListingClient<runtime.Types.Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Listing that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingFindFirstArgs} args - Arguments to find a Listing
   * @example
   * // Get one Listing
   * const listing = await prisma.listing.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ListingFindFirstArgs>(args?: Prisma.SelectSubset<T, ListingFindFirstArgs<ExtArgs>>): Prisma.Prisma__ListingClient<runtime.Types.Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Listing that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingFindFirstOrThrowArgs} args - Arguments to find a Listing
   * @example
   * // Get one Listing
   * const listing = await prisma.listing.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ListingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ListingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ListingClient<runtime.Types.Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Listings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Listings
   * const listings = await prisma.listing.findMany()
   * 
   * // Get first 10 Listings
   * const listings = await prisma.listing.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const listingWithIdOnly = await prisma.listing.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ListingFindManyArgs>(args?: Prisma.SelectSubset<T, ListingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Listing.
   * @param {ListingCreateArgs} args - Arguments to create a Listing.
   * @example
   * // Create one Listing
   * const Listing = await prisma.listing.create({
   *   data: {
   *     // ... data to create a Listing
   *   }
   * })
   * 
   */
  create<T extends ListingCreateArgs>(args: Prisma.SelectSubset<T, ListingCreateArgs<ExtArgs>>): Prisma.Prisma__ListingClient<runtime.Types.Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Listings.
   * @param {ListingCreateManyArgs} args - Arguments to create many Listings.
   * @example
   * // Create many Listings
   * const listing = await prisma.listing.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ListingCreateManyArgs>(args?: Prisma.SelectSubset<T, ListingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Listings and returns the data saved in the database.
   * @param {ListingCreateManyAndReturnArgs} args - Arguments to create many Listings.
   * @example
   * // Create many Listings
   * const listing = await prisma.listing.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Listings and only return the `id`
   * const listingWithIdOnly = await prisma.listing.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ListingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ListingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Listing.
   * @param {ListingDeleteArgs} args - Arguments to delete one Listing.
   * @example
   * // Delete one Listing
   * const Listing = await prisma.listing.delete({
   *   where: {
   *     // ... filter to delete one Listing
   *   }
   * })
   * 
   */
  delete<T extends ListingDeleteArgs>(args: Prisma.SelectSubset<T, ListingDeleteArgs<ExtArgs>>): Prisma.Prisma__ListingClient<runtime.Types.Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Listing.
   * @param {ListingUpdateArgs} args - Arguments to update one Listing.
   * @example
   * // Update one Listing
   * const listing = await prisma.listing.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ListingUpdateArgs>(args: Prisma.SelectSubset<T, ListingUpdateArgs<ExtArgs>>): Prisma.Prisma__ListingClient<runtime.Types.Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Listings.
   * @param {ListingDeleteManyArgs} args - Arguments to filter Listings to delete.
   * @example
   * // Delete a few Listings
   * const { count } = await prisma.listing.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ListingDeleteManyArgs>(args?: Prisma.SelectSubset<T, ListingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Listings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Listings
   * const listing = await prisma.listing.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ListingUpdateManyArgs>(args: Prisma.SelectSubset<T, ListingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Listings and returns the data updated in the database.
   * @param {ListingUpdateManyAndReturnArgs} args - Arguments to update many Listings.
   * @example
   * // Update many Listings
   * const listing = await prisma.listing.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Listings and only return the `id`
   * const listingWithIdOnly = await prisma.listing.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ListingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ListingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Listing.
   * @param {ListingUpsertArgs} args - Arguments to update or create a Listing.
   * @example
   * // Update or create a Listing
   * const listing = await prisma.listing.upsert({
   *   create: {
   *     // ... data to create a Listing
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Listing we want to update
   *   }
   * })
   */
  upsert<T extends ListingUpsertArgs>(args: Prisma.SelectSubset<T, ListingUpsertArgs<ExtArgs>>): Prisma.Prisma__ListingClient<runtime.Types.Result.GetResult<Prisma.$ListingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Listings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingCountArgs} args - Arguments to filter Listings to count.
   * @example
   * // Count the number of Listings
   * const count = await prisma.listing.count({
   *   where: {
   *     // ... the filter for the Listings we want to count
   *   }
   * })
  **/
  count<T extends ListingCountArgs>(
    args?: Prisma.Subset<T, ListingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ListingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Listing.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ListingAggregateArgs>(args: Prisma.Subset<T, ListingAggregateArgs>): Prisma.PrismaPromise<GetListingAggregateType<T>>

  /**
   * Group by Listing.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ListingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ListingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ListingGroupByArgs['orderBy'] }
      : { orderBy?: ListingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ListingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Listing model
 */
readonly fields: ListingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Listing.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ListingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  wexel<T extends Prisma.WexelDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WexelDefaultArgs<ExtArgs>>): Prisma.Prisma__WexelClient<runtime.Types.Result.GetResult<Prisma.$WexelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Listing model
 */
export interface ListingFieldRefs {
  readonly id: Prisma.FieldRef<"Listing", 'BigInt'>
  readonly wexel_id: Prisma.FieldRef<"Listing", 'BigInt'>
  readonly ask_price_usd: Prisma.FieldRef<"Listing", 'BigInt'>
  readonly auction: Prisma.FieldRef<"Listing", 'Boolean'>
  readonly min_bid_usd: Prisma.FieldRef<"Listing", 'BigInt'>
  readonly expiry_ts: Prisma.FieldRef<"Listing", 'DateTime'>
  readonly status: Prisma.FieldRef<"Listing", 'String'>
  readonly created_at: Prisma.FieldRef<"Listing", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"Listing", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Listing findUnique
 */
export type ListingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Listing
   */
  select?: Prisma.ListingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Listing
   */
  omit?: Prisma.ListingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingInclude<ExtArgs> | null
  /**
   * Filter, which Listing to fetch.
   */
  where: Prisma.ListingWhereUniqueInput
}

/**
 * Listing findUniqueOrThrow
 */
export type ListingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Listing
   */
  select?: Prisma.ListingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Listing
   */
  omit?: Prisma.ListingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingInclude<ExtArgs> | null
  /**
   * Filter, which Listing to fetch.
   */
  where: Prisma.ListingWhereUniqueInput
}

/**
 * Listing findFirst
 */
export type ListingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Listing
   */
  select?: Prisma.ListingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Listing
   */
  omit?: Prisma.ListingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingInclude<ExtArgs> | null
  /**
   * Filter, which Listing to fetch.
   */
  where?: Prisma.ListingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Listings to fetch.
   */
  orderBy?: Prisma.ListingOrderByWithRelationInput | Prisma.ListingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Listings.
   */
  cursor?: Prisma.ListingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Listings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Listings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Listings.
   */
  distinct?: Prisma.ListingScalarFieldEnum | Prisma.ListingScalarFieldEnum[]
}

/**
 * Listing findFirstOrThrow
 */
export type ListingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Listing
   */
  select?: Prisma.ListingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Listing
   */
  omit?: Prisma.ListingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingInclude<ExtArgs> | null
  /**
   * Filter, which Listing to fetch.
   */
  where?: Prisma.ListingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Listings to fetch.
   */
  orderBy?: Prisma.ListingOrderByWithRelationInput | Prisma.ListingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Listings.
   */
  cursor?: Prisma.ListingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Listings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Listings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Listings.
   */
  distinct?: Prisma.ListingScalarFieldEnum | Prisma.ListingScalarFieldEnum[]
}

/**
 * Listing findMany
 */
export type ListingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Listing
   */
  select?: Prisma.ListingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Listing
   */
  omit?: Prisma.ListingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingInclude<ExtArgs> | null
  /**
   * Filter, which Listings to fetch.
   */
  where?: Prisma.ListingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Listings to fetch.
   */
  orderBy?: Prisma.ListingOrderByWithRelationInput | Prisma.ListingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Listings.
   */
  cursor?: Prisma.ListingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Listings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Listings.
   */
  skip?: number
  distinct?: Prisma.ListingScalarFieldEnum | Prisma.ListingScalarFieldEnum[]
}

/**
 * Listing create
 */
export type ListingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Listing
   */
  select?: Prisma.ListingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Listing
   */
  omit?: Prisma.ListingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingInclude<ExtArgs> | null
  /**
   * The data needed to create a Listing.
   */
  data: Prisma.XOR<Prisma.ListingCreateInput, Prisma.ListingUncheckedCreateInput>
}

/**
 * Listing createMany
 */
export type ListingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Listings.
   */
  data: Prisma.ListingCreateManyInput | Prisma.ListingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Listing createManyAndReturn
 */
export type ListingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Listing
   */
  select?: Prisma.ListingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Listing
   */
  omit?: Prisma.ListingOmit<ExtArgs> | null
  /**
   * The data used to create many Listings.
   */
  data: Prisma.ListingCreateManyInput | Prisma.ListingCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Listing update
 */
export type ListingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Listing
   */
  select?: Prisma.ListingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Listing
   */
  omit?: Prisma.ListingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingInclude<ExtArgs> | null
  /**
   * The data needed to update a Listing.
   */
  data: Prisma.XOR<Prisma.ListingUpdateInput, Prisma.ListingUncheckedUpdateInput>
  /**
   * Choose, which Listing to update.
   */
  where: Prisma.ListingWhereUniqueInput
}

/**
 * Listing updateMany
 */
export type ListingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Listings.
   */
  data: Prisma.XOR<Prisma.ListingUpdateManyMutationInput, Prisma.ListingUncheckedUpdateManyInput>
  /**
   * Filter which Listings to update
   */
  where?: Prisma.ListingWhereInput
  /**
   * Limit how many Listings to update.
   */
  limit?: number
}

/**
 * Listing updateManyAndReturn
 */
export type ListingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Listing
   */
  select?: Prisma.ListingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Listing
   */
  omit?: Prisma.ListingOmit<ExtArgs> | null
  /**
   * The data used to update Listings.
   */
  data: Prisma.XOR<Prisma.ListingUpdateManyMutationInput, Prisma.ListingUncheckedUpdateManyInput>
  /**
   * Filter which Listings to update
   */
  where?: Prisma.ListingWhereInput
  /**
   * Limit how many Listings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Listing upsert
 */
export type ListingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Listing
   */
  select?: Prisma.ListingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Listing
   */
  omit?: Prisma.ListingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingInclude<ExtArgs> | null
  /**
   * The filter to search for the Listing to update in case it exists.
   */
  where: Prisma.ListingWhereUniqueInput
  /**
   * In case the Listing found by the `where` argument doesn't exist, create a new Listing with this data.
   */
  create: Prisma.XOR<Prisma.ListingCreateInput, Prisma.ListingUncheckedCreateInput>
  /**
   * In case the Listing was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ListingUpdateInput, Prisma.ListingUncheckedUpdateInput>
}

/**
 * Listing delete
 */
export type ListingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Listing
   */
  select?: Prisma.ListingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Listing
   */
  omit?: Prisma.ListingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingInclude<ExtArgs> | null
  /**
   * Filter which Listing to delete.
   */
  where: Prisma.ListingWhereUniqueInput
}

/**
 * Listing deleteMany
 */
export type ListingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Listings to delete
   */
  where?: Prisma.ListingWhereInput
  /**
   * Limit how many Listings to delete.
   */
  limit?: number
}

/**
 * Listing without action
 */
export type ListingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Listing
   */
  select?: Prisma.ListingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Listing
   */
  omit?: Prisma.ListingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ListingInclude<ExtArgs> | null
}
