/* !!! This is code generated by Prisma. Do not edit directly. !!! */

// @ts-nocheck
/*
 * This file exports the `TokenPrice` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums.js';
import type * as Prisma from '../internal/prismaNamespace.js';

/**
 * Model TokenPrice
 *
 */
export type TokenPriceModel =
  runtime.Types.Result.DefaultSelection<Prisma.$TokenPricePayload>;

export type AggregateTokenPrice = {
  _count: TokenPriceCountAggregateOutputType | null;
  _avg: TokenPriceAvgAggregateOutputType | null;
  _sum: TokenPriceSumAggregateOutputType | null;
  _min: TokenPriceMinAggregateOutputType | null;
  _max: TokenPriceMaxAggregateOutputType | null;
};

export type TokenPriceAvgAggregateOutputType = {
  id: number | null;
  price_usd: number | null;
};

export type TokenPriceSumAggregateOutputType = {
  id: bigint | null;
  price_usd: bigint | null;
};

export type TokenPriceMinAggregateOutputType = {
  id: bigint | null;
  token_mint: string | null;
  price_usd: bigint | null;
  source: string | null;
  updated_at: Date | null;
};

export type TokenPriceMaxAggregateOutputType = {
  id: bigint | null;
  token_mint: string | null;
  price_usd: bigint | null;
  source: string | null;
  updated_at: Date | null;
};

export type TokenPriceCountAggregateOutputType = {
  id: number;
  token_mint: number;
  price_usd: number;
  source: number;
  updated_at: number;
  _all: number;
};

export type TokenPriceAvgAggregateInputType = {
  id?: true;
  price_usd?: true;
};

export type TokenPriceSumAggregateInputType = {
  id?: true;
  price_usd?: true;
};

export type TokenPriceMinAggregateInputType = {
  id?: true;
  token_mint?: true;
  price_usd?: true;
  source?: true;
  updated_at?: true;
};

export type TokenPriceMaxAggregateInputType = {
  id?: true;
  token_mint?: true;
  price_usd?: true;
  source?: true;
  updated_at?: true;
};

export type TokenPriceCountAggregateInputType = {
  id?: true;
  token_mint?: true;
  price_usd?: true;
  source?: true;
  updated_at?: true;
  _all?: true;
};

export type TokenPriceAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which TokenPrice to aggregate.
   */
  where?: Prisma.TokenPriceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TokenPrices to fetch.
   */
  orderBy?:
    | Prisma.TokenPriceOrderByWithRelationInput
    | Prisma.TokenPriceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.TokenPriceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TokenPrices from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TokenPrices.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned TokenPrices
   **/
  _count?: true | TokenPriceCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to average
   **/
  _avg?: TokenPriceAvgAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to sum
   **/
  _sum?: TokenPriceSumAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: TokenPriceMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: TokenPriceMaxAggregateInputType;
};

export type GetTokenPriceAggregateType<T extends TokenPriceAggregateArgs> = {
  [P in keyof T & keyof AggregateTokenPrice]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTokenPrice[P]>
    : Prisma.GetScalarType<T[P], AggregateTokenPrice[P]>;
};

export type TokenPriceGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.TokenPriceWhereInput;
  orderBy?:
    | Prisma.TokenPriceOrderByWithAggregationInput
    | Prisma.TokenPriceOrderByWithAggregationInput[];
  by: Prisma.TokenPriceScalarFieldEnum[] | Prisma.TokenPriceScalarFieldEnum;
  having?: Prisma.TokenPriceScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: TokenPriceCountAggregateInputType | true;
  _avg?: TokenPriceAvgAggregateInputType;
  _sum?: TokenPriceSumAggregateInputType;
  _min?: TokenPriceMinAggregateInputType;
  _max?: TokenPriceMaxAggregateInputType;
};

export type TokenPriceGroupByOutputType = {
  id: bigint;
  token_mint: string;
  price_usd: bigint;
  source: string;
  updated_at: Date;
  _count: TokenPriceCountAggregateOutputType | null;
  _avg: TokenPriceAvgAggregateOutputType | null;
  _sum: TokenPriceSumAggregateOutputType | null;
  _min: TokenPriceMinAggregateOutputType | null;
  _max: TokenPriceMaxAggregateOutputType | null;
};

type GetTokenPriceGroupByPayload<T extends TokenPriceGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<TokenPriceGroupByOutputType, T['by']> & {
        [P in keyof T & keyof TokenPriceGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TokenPriceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TokenPriceGroupByOutputType[P]>;
      }
    >
  >;

export type TokenPriceWhereInput = {
  AND?: Prisma.TokenPriceWhereInput | Prisma.TokenPriceWhereInput[];
  OR?: Prisma.TokenPriceWhereInput[];
  NOT?: Prisma.TokenPriceWhereInput | Prisma.TokenPriceWhereInput[];
  id?: Prisma.BigIntFilter<'TokenPrice'> | bigint | number;
  token_mint?: Prisma.StringFilter<'TokenPrice'> | string;
  price_usd?: Prisma.BigIntFilter<'TokenPrice'> | bigint | number;
  source?: Prisma.StringFilter<'TokenPrice'> | string;
  updated_at?: Prisma.DateTimeFilter<'TokenPrice'> | Date | string;
};

export type TokenPriceOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  token_mint?: Prisma.SortOrder;
  price_usd?: Prisma.SortOrder;
  source?: Prisma.SortOrder;
  updated_at?: Prisma.SortOrder;
};

export type TokenPriceWhereUniqueInput = Prisma.AtLeast<
  {
    id?: bigint | number;
    token_mint?: string;
    AND?: Prisma.TokenPriceWhereInput | Prisma.TokenPriceWhereInput[];
    OR?: Prisma.TokenPriceWhereInput[];
    NOT?: Prisma.TokenPriceWhereInput | Prisma.TokenPriceWhereInput[];
    price_usd?: Prisma.BigIntFilter<'TokenPrice'> | bigint | number;
    source?: Prisma.StringFilter<'TokenPrice'> | string;
    updated_at?: Prisma.DateTimeFilter<'TokenPrice'> | Date | string;
  },
  'id' | 'token_mint'
>;

export type TokenPriceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  token_mint?: Prisma.SortOrder;
  price_usd?: Prisma.SortOrder;
  source?: Prisma.SortOrder;
  updated_at?: Prisma.SortOrder;
  _count?: Prisma.TokenPriceCountOrderByAggregateInput;
  _avg?: Prisma.TokenPriceAvgOrderByAggregateInput;
  _max?: Prisma.TokenPriceMaxOrderByAggregateInput;
  _min?: Prisma.TokenPriceMinOrderByAggregateInput;
  _sum?: Prisma.TokenPriceSumOrderByAggregateInput;
};

export type TokenPriceScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.TokenPriceScalarWhereWithAggregatesInput
    | Prisma.TokenPriceScalarWhereWithAggregatesInput[];
  OR?: Prisma.TokenPriceScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.TokenPriceScalarWhereWithAggregatesInput
    | Prisma.TokenPriceScalarWhereWithAggregatesInput[];
  id?: Prisma.BigIntWithAggregatesFilter<'TokenPrice'> | bigint | number;
  token_mint?: Prisma.StringWithAggregatesFilter<'TokenPrice'> | string;
  price_usd?: Prisma.BigIntWithAggregatesFilter<'TokenPrice'> | bigint | number;
  source?: Prisma.StringWithAggregatesFilter<'TokenPrice'> | string;
  updated_at?:
    | Prisma.DateTimeWithAggregatesFilter<'TokenPrice'>
    | Date
    | string;
};

export type TokenPriceCreateInput = {
  id?: bigint | number;
  token_mint: string;
  price_usd: bigint | number;
  source: string;
  updated_at?: Date | string;
};

export type TokenPriceUncheckedCreateInput = {
  id?: bigint | number;
  token_mint: string;
  price_usd: bigint | number;
  source: string;
  updated_at?: Date | string;
};

export type TokenPriceUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  token_mint?: Prisma.StringFieldUpdateOperationsInput | string;
  price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  source?: Prisma.StringFieldUpdateOperationsInput | string;
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TokenPriceUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  token_mint?: Prisma.StringFieldUpdateOperationsInput | string;
  price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  source?: Prisma.StringFieldUpdateOperationsInput | string;
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TokenPriceCreateManyInput = {
  id?: bigint | number;
  token_mint: string;
  price_usd: bigint | number;
  source: string;
  updated_at?: Date | string;
};

export type TokenPriceUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  token_mint?: Prisma.StringFieldUpdateOperationsInput | string;
  price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  source?: Prisma.StringFieldUpdateOperationsInput | string;
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TokenPriceUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  token_mint?: Prisma.StringFieldUpdateOperationsInput | string;
  price_usd?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number;
  source?: Prisma.StringFieldUpdateOperationsInput | string;
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type TokenPriceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  token_mint?: Prisma.SortOrder;
  price_usd?: Prisma.SortOrder;
  source?: Prisma.SortOrder;
  updated_at?: Prisma.SortOrder;
};

export type TokenPriceAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  price_usd?: Prisma.SortOrder;
};

export type TokenPriceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  token_mint?: Prisma.SortOrder;
  price_usd?: Prisma.SortOrder;
  source?: Prisma.SortOrder;
  updated_at?: Prisma.SortOrder;
};

export type TokenPriceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  token_mint?: Prisma.SortOrder;
  price_usd?: Prisma.SortOrder;
  source?: Prisma.SortOrder;
  updated_at?: Prisma.SortOrder;
};

export type TokenPriceSumOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  price_usd?: Prisma.SortOrder;
};

export type TokenPriceSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    token_mint?: boolean;
    price_usd?: boolean;
    source?: boolean;
    updated_at?: boolean;
  },
  ExtArgs['result']['tokenPrice']
>;

export type TokenPriceSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    token_mint?: boolean;
    price_usd?: boolean;
    source?: boolean;
    updated_at?: boolean;
  },
  ExtArgs['result']['tokenPrice']
>;

export type TokenPriceSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    token_mint?: boolean;
    price_usd?: boolean;
    source?: boolean;
    updated_at?: boolean;
  },
  ExtArgs['result']['tokenPrice']
>;

export type TokenPriceSelectScalar = {
  id?: boolean;
  token_mint?: boolean;
  price_usd?: boolean;
  source?: boolean;
  updated_at?: boolean;
};

export type TokenPriceOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'token_mint' | 'price_usd' | 'source' | 'updated_at',
  ExtArgs['result']['tokenPrice']
>;

export type $TokenPricePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'TokenPrice';
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: bigint;
      token_mint: string;
      price_usd: bigint;
      source: string;
      updated_at: Date;
    },
    ExtArgs['result']['tokenPrice']
  >;
  composites: {};
};

export type TokenPriceGetPayload<
  S extends boolean | null | undefined | TokenPriceDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$TokenPricePayload, S>;

export type TokenPriceCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<TokenPriceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: TokenPriceCountAggregateInputType | true;
};

export interface TokenPriceDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['TokenPrice'];
    meta: { name: 'TokenPrice' };
  };
  /**
   * Find zero or one TokenPrice that matches the filter.
   * @param {TokenPriceFindUniqueArgs} args - Arguments to find a TokenPrice
   * @example
   * // Get one TokenPrice
   * const tokenPrice = await prisma.tokenPrice.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TokenPriceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, TokenPriceFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__TokenPriceClient<
    runtime.Types.Result.GetResult<
      Prisma.$TokenPricePayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one TokenPrice that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TokenPriceFindUniqueOrThrowArgs} args - Arguments to find a TokenPrice
   * @example
   * // Get one TokenPrice
   * const tokenPrice = await prisma.tokenPrice.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TokenPriceFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, TokenPriceFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__TokenPriceClient<
    runtime.Types.Result.GetResult<
      Prisma.$TokenPricePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TokenPrice that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokenPriceFindFirstArgs} args - Arguments to find a TokenPrice
   * @example
   * // Get one TokenPrice
   * const tokenPrice = await prisma.tokenPrice.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TokenPriceFindFirstArgs>(
    args?: Prisma.SelectSubset<T, TokenPriceFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__TokenPriceClient<
    runtime.Types.Result.GetResult<
      Prisma.$TokenPricePayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first TokenPrice that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokenPriceFindFirstOrThrowArgs} args - Arguments to find a TokenPrice
   * @example
   * // Get one TokenPrice
   * const tokenPrice = await prisma.tokenPrice.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TokenPriceFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, TokenPriceFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__TokenPriceClient<
    runtime.Types.Result.GetResult<
      Prisma.$TokenPricePayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more TokenPrices that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokenPriceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TokenPrices
   * const tokenPrices = await prisma.tokenPrice.findMany()
   *
   * // Get first 10 TokenPrices
   * const tokenPrices = await prisma.tokenPrice.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const tokenPriceWithIdOnly = await prisma.tokenPrice.findMany({ select: { id: true } })
   *
   */
  findMany<T extends TokenPriceFindManyArgs>(
    args?: Prisma.SelectSubset<T, TokenPriceFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TokenPricePayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a TokenPrice.
   * @param {TokenPriceCreateArgs} args - Arguments to create a TokenPrice.
   * @example
   * // Create one TokenPrice
   * const TokenPrice = await prisma.tokenPrice.create({
   *   data: {
   *     // ... data to create a TokenPrice
   *   }
   * })
   *
   */
  create<T extends TokenPriceCreateArgs>(
    args: Prisma.SelectSubset<T, TokenPriceCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__TokenPriceClient<
    runtime.Types.Result.GetResult<
      Prisma.$TokenPricePayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many TokenPrices.
   * @param {TokenPriceCreateManyArgs} args - Arguments to create many TokenPrices.
   * @example
   * // Create many TokenPrices
   * const tokenPrice = await prisma.tokenPrice.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends TokenPriceCreateManyArgs>(
    args?: Prisma.SelectSubset<T, TokenPriceCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many TokenPrices and returns the data saved in the database.
   * @param {TokenPriceCreateManyAndReturnArgs} args - Arguments to create many TokenPrices.
   * @example
   * // Create many TokenPrices
   * const tokenPrice = await prisma.tokenPrice.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many TokenPrices and only return the `id`
   * const tokenPriceWithIdOnly = await prisma.tokenPrice.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends TokenPriceCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, TokenPriceCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TokenPricePayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a TokenPrice.
   * @param {TokenPriceDeleteArgs} args - Arguments to delete one TokenPrice.
   * @example
   * // Delete one TokenPrice
   * const TokenPrice = await prisma.tokenPrice.delete({
   *   where: {
   *     // ... filter to delete one TokenPrice
   *   }
   * })
   *
   */
  delete<T extends TokenPriceDeleteArgs>(
    args: Prisma.SelectSubset<T, TokenPriceDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__TokenPriceClient<
    runtime.Types.Result.GetResult<
      Prisma.$TokenPricePayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one TokenPrice.
   * @param {TokenPriceUpdateArgs} args - Arguments to update one TokenPrice.
   * @example
   * // Update one TokenPrice
   * const tokenPrice = await prisma.tokenPrice.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends TokenPriceUpdateArgs>(
    args: Prisma.SelectSubset<T, TokenPriceUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__TokenPriceClient<
    runtime.Types.Result.GetResult<
      Prisma.$TokenPricePayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more TokenPrices.
   * @param {TokenPriceDeleteManyArgs} args - Arguments to filter TokenPrices to delete.
   * @example
   * // Delete a few TokenPrices
   * const { count } = await prisma.tokenPrice.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends TokenPriceDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, TokenPriceDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TokenPrices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokenPriceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TokenPrices
   * const tokenPrice = await prisma.tokenPrice.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends TokenPriceUpdateManyArgs>(
    args: Prisma.SelectSubset<T, TokenPriceUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more TokenPrices and returns the data updated in the database.
   * @param {TokenPriceUpdateManyAndReturnArgs} args - Arguments to update many TokenPrices.
   * @example
   * // Update many TokenPrices
   * const tokenPrice = await prisma.tokenPrice.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more TokenPrices and only return the `id`
   * const tokenPriceWithIdOnly = await prisma.tokenPrice.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends TokenPriceUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, TokenPriceUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$TokenPricePayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one TokenPrice.
   * @param {TokenPriceUpsertArgs} args - Arguments to update or create a TokenPrice.
   * @example
   * // Update or create a TokenPrice
   * const tokenPrice = await prisma.tokenPrice.upsert({
   *   create: {
   *     // ... data to create a TokenPrice
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TokenPrice we want to update
   *   }
   * })
   */
  upsert<T extends TokenPriceUpsertArgs>(
    args: Prisma.SelectSubset<T, TokenPriceUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__TokenPriceClient<
    runtime.Types.Result.GetResult<
      Prisma.$TokenPricePayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of TokenPrices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokenPriceCountArgs} args - Arguments to filter TokenPrices to count.
   * @example
   * // Count the number of TokenPrices
   * const count = await prisma.tokenPrice.count({
   *   where: {
   *     // ... the filter for the TokenPrices we want to count
   *   }
   * })
   **/
  count<T extends TokenPriceCountArgs>(
    args?: Prisma.Subset<T, TokenPriceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TokenPriceCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a TokenPrice.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokenPriceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends TokenPriceAggregateArgs>(
    args: Prisma.Subset<T, TokenPriceAggregateArgs>,
  ): Prisma.PrismaPromise<GetTokenPriceAggregateType<T>>;

  /**
   * Group by TokenPrice.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TokenPriceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends TokenPriceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TokenPriceGroupByArgs['orderBy'] }
      : { orderBy?: TokenPriceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, TokenPriceGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetTokenPriceGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the TokenPrice model
   */
  readonly fields: TokenPriceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TokenPrice.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TokenPriceClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the TokenPrice model
 */
export interface TokenPriceFieldRefs {
  readonly id: Prisma.FieldRef<'TokenPrice', 'BigInt'>;
  readonly token_mint: Prisma.FieldRef<'TokenPrice', 'String'>;
  readonly price_usd: Prisma.FieldRef<'TokenPrice', 'BigInt'>;
  readonly source: Prisma.FieldRef<'TokenPrice', 'String'>;
  readonly updated_at: Prisma.FieldRef<'TokenPrice', 'DateTime'>;
}

// Custom InputTypes
/**
 * TokenPrice findUnique
 */
export type TokenPriceFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TokenPrice
   */
  select?: Prisma.TokenPriceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TokenPrice
   */
  omit?: Prisma.TokenPriceOmit<ExtArgs> | null;
  /**
   * Filter, which TokenPrice to fetch.
   */
  where: Prisma.TokenPriceWhereUniqueInput;
};

/**
 * TokenPrice findUniqueOrThrow
 */
export type TokenPriceFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TokenPrice
   */
  select?: Prisma.TokenPriceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TokenPrice
   */
  omit?: Prisma.TokenPriceOmit<ExtArgs> | null;
  /**
   * Filter, which TokenPrice to fetch.
   */
  where: Prisma.TokenPriceWhereUniqueInput;
};

/**
 * TokenPrice findFirst
 */
export type TokenPriceFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TokenPrice
   */
  select?: Prisma.TokenPriceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TokenPrice
   */
  omit?: Prisma.TokenPriceOmit<ExtArgs> | null;
  /**
   * Filter, which TokenPrice to fetch.
   */
  where?: Prisma.TokenPriceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TokenPrices to fetch.
   */
  orderBy?:
    | Prisma.TokenPriceOrderByWithRelationInput
    | Prisma.TokenPriceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TokenPrices.
   */
  cursor?: Prisma.TokenPriceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TokenPrices from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TokenPrices.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TokenPrices.
   */
  distinct?:
    | Prisma.TokenPriceScalarFieldEnum
    | Prisma.TokenPriceScalarFieldEnum[];
};

/**
 * TokenPrice findFirstOrThrow
 */
export type TokenPriceFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TokenPrice
   */
  select?: Prisma.TokenPriceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TokenPrice
   */
  omit?: Prisma.TokenPriceOmit<ExtArgs> | null;
  /**
   * Filter, which TokenPrice to fetch.
   */
  where?: Prisma.TokenPriceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TokenPrices to fetch.
   */
  orderBy?:
    | Prisma.TokenPriceOrderByWithRelationInput
    | Prisma.TokenPriceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for TokenPrices.
   */
  cursor?: Prisma.TokenPriceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TokenPrices from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TokenPrices.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of TokenPrices.
   */
  distinct?:
    | Prisma.TokenPriceScalarFieldEnum
    | Prisma.TokenPriceScalarFieldEnum[];
};

/**
 * TokenPrice findMany
 */
export type TokenPriceFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TokenPrice
   */
  select?: Prisma.TokenPriceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TokenPrice
   */
  omit?: Prisma.TokenPriceOmit<ExtArgs> | null;
  /**
   * Filter, which TokenPrices to fetch.
   */
  where?: Prisma.TokenPriceWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of TokenPrices to fetch.
   */
  orderBy?:
    | Prisma.TokenPriceOrderByWithRelationInput
    | Prisma.TokenPriceOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing TokenPrices.
   */
  cursor?: Prisma.TokenPriceWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` TokenPrices from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` TokenPrices.
   */
  skip?: number;
  distinct?:
    | Prisma.TokenPriceScalarFieldEnum
    | Prisma.TokenPriceScalarFieldEnum[];
};

/**
 * TokenPrice create
 */
export type TokenPriceCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TokenPrice
   */
  select?: Prisma.TokenPriceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TokenPrice
   */
  omit?: Prisma.TokenPriceOmit<ExtArgs> | null;
  /**
   * The data needed to create a TokenPrice.
   */
  data: Prisma.XOR<
    Prisma.TokenPriceCreateInput,
    Prisma.TokenPriceUncheckedCreateInput
  >;
};

/**
 * TokenPrice createMany
 */
export type TokenPriceCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many TokenPrices.
   */
  data: Prisma.TokenPriceCreateManyInput | Prisma.TokenPriceCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * TokenPrice createManyAndReturn
 */
export type TokenPriceCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TokenPrice
   */
  select?: Prisma.TokenPriceSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TokenPrice
   */
  omit?: Prisma.TokenPriceOmit<ExtArgs> | null;
  /**
   * The data used to create many TokenPrices.
   */
  data: Prisma.TokenPriceCreateManyInput | Prisma.TokenPriceCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * TokenPrice update
 */
export type TokenPriceUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TokenPrice
   */
  select?: Prisma.TokenPriceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TokenPrice
   */
  omit?: Prisma.TokenPriceOmit<ExtArgs> | null;
  /**
   * The data needed to update a TokenPrice.
   */
  data: Prisma.XOR<
    Prisma.TokenPriceUpdateInput,
    Prisma.TokenPriceUncheckedUpdateInput
  >;
  /**
   * Choose, which TokenPrice to update.
   */
  where: Prisma.TokenPriceWhereUniqueInput;
};

/**
 * TokenPrice updateMany
 */
export type TokenPriceUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update TokenPrices.
   */
  data: Prisma.XOR<
    Prisma.TokenPriceUpdateManyMutationInput,
    Prisma.TokenPriceUncheckedUpdateManyInput
  >;
  /**
   * Filter which TokenPrices to update
   */
  where?: Prisma.TokenPriceWhereInput;
  /**
   * Limit how many TokenPrices to update.
   */
  limit?: number;
};

/**
 * TokenPrice updateManyAndReturn
 */
export type TokenPriceUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TokenPrice
   */
  select?: Prisma.TokenPriceSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the TokenPrice
   */
  omit?: Prisma.TokenPriceOmit<ExtArgs> | null;
  /**
   * The data used to update TokenPrices.
   */
  data: Prisma.XOR<
    Prisma.TokenPriceUpdateManyMutationInput,
    Prisma.TokenPriceUncheckedUpdateManyInput
  >;
  /**
   * Filter which TokenPrices to update
   */
  where?: Prisma.TokenPriceWhereInput;
  /**
   * Limit how many TokenPrices to update.
   */
  limit?: number;
};

/**
 * TokenPrice upsert
 */
export type TokenPriceUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TokenPrice
   */
  select?: Prisma.TokenPriceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TokenPrice
   */
  omit?: Prisma.TokenPriceOmit<ExtArgs> | null;
  /**
   * The filter to search for the TokenPrice to update in case it exists.
   */
  where: Prisma.TokenPriceWhereUniqueInput;
  /**
   * In case the TokenPrice found by the `where` argument doesn't exist, create a new TokenPrice with this data.
   */
  create: Prisma.XOR<
    Prisma.TokenPriceCreateInput,
    Prisma.TokenPriceUncheckedCreateInput
  >;
  /**
   * In case the TokenPrice was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.TokenPriceUpdateInput,
    Prisma.TokenPriceUncheckedUpdateInput
  >;
};

/**
 * TokenPrice delete
 */
export type TokenPriceDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TokenPrice
   */
  select?: Prisma.TokenPriceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TokenPrice
   */
  omit?: Prisma.TokenPriceOmit<ExtArgs> | null;
  /**
   * Filter which TokenPrice to delete.
   */
  where: Prisma.TokenPriceWhereUniqueInput;
};

/**
 * TokenPrice deleteMany
 */
export type TokenPriceDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which TokenPrices to delete
   */
  where?: Prisma.TokenPriceWhereInput;
  /**
   * Limit how many TokenPrices to delete.
   */
  limit?: number;
};

/**
 * TokenPrice without action
 */
export type TokenPriceDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the TokenPrice
   */
  select?: Prisma.TokenPriceSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the TokenPrice
   */
  omit?: Prisma.TokenPriceOmit<ExtArgs> | null;
};
