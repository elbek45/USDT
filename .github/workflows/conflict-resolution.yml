name: Conflict Resolution

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  schedule:
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    - cron: "*/30 * * * *"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  detect-conflicts:
    runs-on: ubuntu-latest
    outputs:
      has-conflicts: ${{ steps.detect.outputs.has-conflicts }}
      conflict-files: ${{ steps.detect.outputs.conflict-files }}
      pr-number: ${{ steps.detect.outputs.pr-number }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect merge conflicts
        id: detect
        run: |
          # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä PR –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö PR
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            HEAD_REF="${{ github.event.pull_request.head.ref }}"
            BASE_REF="${{ github.event.pull_request.base.ref }}"
          else
            # –î–ª—è scheduled runs –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ PR
            PR_LIST=$(gh pr list --state open --base main --json number,headRefName,baseRefName)
            PR_COUNT=$(echo $PR_LIST | jq length)
            
            if [ "$PR_COUNT" -eq 0 ]; then
              echo "No open PRs found"
              echo "has-conflicts=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π PR –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            PR_NUMBER=$(echo $PR_LIST | jq -r '.[0].number')
            HEAD_REF=$(echo $PR_LIST | jq -r '.[0].headRefName')
            BASE_REF=$(echo $PR_LIST | jq -r '.[0].baseRefName')
          fi

          echo "Checking PR #$PR_NUMBER for conflicts"
          echo "pr-number=$PR_NUMBER" >> $GITHUB_OUTPUT

          # –û–±–Ω–æ–≤–ª—è–µ–º main –≤–µ—Ç–∫—É
          git fetch origin main
          git checkout main
          git pull origin main

          # –ü–æ–ª—É—á–∞–µ–º feature –≤–µ—Ç–∫—É
          git fetch origin $HEAD_REF

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
          if git merge-tree $(git merge-base origin/main origin/$HEAD_REF) origin/main origin/$HEAD_REF > /tmp/merge-result 2>&1; then
            echo "No conflicts detected"
            echo "has-conflicts=false" >> $GITHUB_OUTPUT
            echo "conflict-files=" >> $GITHUB_OUTPUT
          else
            echo "Conflicts detected"
            echo "has-conflicts=true" >> $GITHUB_OUTPUT
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏
            CONFLICT_FILES=$(grep -E '^<<<<<<<|^=======|^>>>>>>>' /tmp/merge-result | grep -o '^[^:]*' | sort -u | tr '\n' ',' | sed 's/,$//')
            echo "conflict-files=$CONFLICT_FILES" >> $GITHUB_OUTPUT
            echo "Conflict files: $CONFLICT_FILES"
          fi

  attempt-auto-resolution:
    runs-on: ubuntu-latest
    needs: detect-conflicts
    if: needs.detect-conflicts.outputs.has-conflicts == 'true'
    outputs:
      resolution-success: ${{ steps.resolve.outputs.success }}
      resolution-message: ${{ steps.resolve.outputs.message }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Attempt auto-resolution
        id: resolve
        run: |
          PR_NUMBER="${{ needs.detect-conflicts.outputs.pr-number }}"
          CONFLICT_FILES="${{ needs.detect-conflicts.outputs.conflict-files }}"

          echo "Attempting to resolve conflicts for PR #$PR_NUMBER"
          echo "Conflict files: $CONFLICT_FILES"

          # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PR
          PR_INFO=$(gh pr view $PR_NUMBER --json title,headRefName,baseRefName,author)
          HEAD_REF=$(echo $PR_INFO | jq -r '.headRefName')
          BASE_REF=$(echo $PR_INFO | jq -r '.baseRefName')
          AUTHOR=$(echo $PR_INFO | jq -r '.author.login')

          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –≤–µ—Ç–∫—É –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
          RESOLUTION_BRANCH="conflict-resolution-$PR_NUMBER-$(date +%s)"
          git checkout -b $RESOLUTION_BRANCH

          # –û–±–Ω–æ–≤–ª—è–µ–º main
          git fetch origin main
          git merge origin/main

          # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
          RESOLUTION_SUCCESS="true"
          RESOLUTION_MESSAGE=""

          # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é "ours" –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
          CONFIG_FILES=$(echo $CONFLICT_FILES | tr ',' '\n' | grep -E '\.(json|yml|yaml|toml|lock)$' || true)
          if [ -n "$CONFIG_FILES" ]; then
            echo "Resolving config files using 'ours' strategy"
            for file in $CONFIG_FILES; do
              if [ -f "$file" ]; then
                git checkout --ours "$file"
                git add "$file"
                echo "Resolved $file using 'ours' strategy"
              fi
            done
          fi

          # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é "theirs" –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          GENERATED_FILES=$(echo $CONFLICT_FILES | tr ',' '\n' | grep -E '(dist/|build/|generated/)' || true)
          if [ -n "$GENERATED_FILES" ]; then
            echo "Resolving generated files using 'theirs' strategy"
            for file in $GENERATED_FILES; do
              if [ -f "$file" ]; then
                git checkout --theirs "$file"
                git add "$file"
                echo "Resolved $file using 'theirs' strategy"
              fi
            done
          fi

          # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
          OTHER_FILES=$(echo $CONFLICT_FILES | tr ',' '\n' | grep -v -E '\.(json|yml|yaml|toml|lock)$' | grep -v -E '(dist/|build/|generated/)' || true)
          if [ -n "$OTHER_FILES" ]; then
            echo "Attempting automatic resolution for other files"
            for file in $OTHER_FILES; do
              if [ -f "$file" ]; then
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å git merge-file –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                if git merge-file --stdout "$file" "$file" "$file" > "$file.resolved" 2>/dev/null; then
                  mv "$file.resolved" "$file"
                  git add "$file"
                  echo "Auto-resolved $file"
                else
                  echo "Could not auto-resolve $file"
                  RESOLUTION_SUCCESS="false"
                  RESOLUTION_MESSAGE="$RESOLUTION_MESSAGE\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤ —Ñ–∞–π–ª–µ: $file"
                fi
              fi
            done
          fi

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
          if git diff --check > /dev/null 2>&1; then
            echo "All conflicts resolved successfully"
            RESOLUTION_MESSAGE="‚úÖ –í—Å–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã"
            
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            git config --local user.name "GitHub Actions Bot"
            git config --local user.email "actions@github.com"
            git commit -m "ü§ñ Auto-resolve merge conflicts

          –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å main –≤–µ—Ç–∫–æ–π:
          - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è 'ours' –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è 'theirs' –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

          Co-authored-by: $AUTHOR <$AUTHOR@users.noreply.github.com>"
            
            # –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ feature –≤–µ—Ç–∫—É
            git push origin $RESOLUTION_BRANCH:$HEAD_REF
            echo "Pushed resolved changes to $HEAD_REF"
          else
            echo "Some conflicts remain unresolved"
            RESOLUTION_SUCCESS="false"
            RESOLUTION_MESSAGE="$RESOLUTION_MESSAGE\n‚ùå –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã"
          fi

          echo "success=$RESOLUTION_SUCCESS" >> $GITHUB_OUTPUT
          echo "message=$RESOLUTION_MESSAGE" >> $GITHUB_OUTPUT

  notify-resolution:
    runs-on: ubuntu-latest
    needs: [detect-conflicts, attempt-auto-resolution]
    if: always()
    steps:
      - name: Notify about resolution
        run: |
          PR_NUMBER="${{ needs.detect-conflicts.outputs.pr-number }}"
          HAS_CONFLICTS="${{ needs.detect-conflicts.outputs.has-conflicts }}"
          RESOLUTION_SUCCESS="${{ needs.attempt-auto-resolution.outputs.resolution-success }}"
          RESOLUTION_MESSAGE="${{ needs.attempt-auto-resolution.outputs.resolution-message }}"

          if [ "$HAS_CONFLICTS" = "true" ]; then
            if [ "$RESOLUTION_SUCCESS" = "true" ]; then
              COMMENT_BODY="## üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
              
              $RESOLUTION_MESSAGE
              
              –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—à–µ–Ω—ã –≤ –≤–∞—à—É –≤–µ—Ç–∫—É. 
              –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–Ω–µ—Å–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏.
              
              ### –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
              1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
              2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
              3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–Ω–µ—Å–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
              4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
            else
              COMMENT_BODY="## ‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
              
              $RESOLUTION_MESSAGE
              
              –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å main –≤–µ—Ç–∫–æ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
              
              ### –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
              1. –û–±–Ω–æ–≤–∏—Ç–µ –≤–∞—à—É –≤–µ—Ç–∫—É: \`git pull origin main\`
              2. –†–∞–∑—Ä–µ—à–∏—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤—Ä—É—á–Ω—É—é
              3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: \`pnpm test\`
              4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ª–∏–Ω—Ç–∏–Ω–≥: \`pnpm lint\`
              5. –ó–∞–ø—É—à—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: \`git push\`"
            fi
            
            gh pr comment $PR_NUMBER --body "$COMMENT_BODY"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [detect-conflicts, attempt-auto-resolution]
    if: always() && needs.attempt-auto-resolution.result == 'success'
    steps:
      - name: Cleanup resolution branch
        run: |
          RESOLUTION_BRANCH="conflict-resolution-${{ needs.detect-conflicts.outputs.pr-number }}-*"
          echo "Cleaning up resolution branches matching: $RESOLUTION_BRANCH"
          # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ—Ç–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã)
          # –≠—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ, —Ç–∞–∫ –∫–∞–∫ –≤–µ—Ç–∫–∏ —É–∂–µ –∑–∞–ø—É—à–µ–Ω—ã
